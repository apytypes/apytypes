Search.setIndex({"docnames": ["api/apyfixed", "api/apyfixedarray", "api/apyfloat", "api/apyfloatarray", "api/context", "api/index", "api/quantizationoverflow", "comparison", "cpp_api/apyfixed", "cpp_api/apyfixedarray", "cpp_api/apyfloat", "cpp_api/apyfloatarray", "cpp_api/apytypes_common", "cpp_api/apytypes_util", "cpp_api/ieee754", "cpp_api/index", "cpp_api/python_util", "examples/apyfixed", "examples/apyfloat", "examples/index", "examples/sg_execution_times", "index", "sg_execution_times"], "filenames": ["api/apyfixed.rst", "api/apyfixedarray.rst", "api/apyfloat.rst", "api/apyfloatarray.rst", "api/context.rst", "api/index.rst", "api/quantizationoverflow.rst", "comparison.rst", "cpp_api/apyfixed.rst", "cpp_api/apyfixedarray.rst", "cpp_api/apyfloat.rst", "cpp_api/apyfloatarray.rst", "cpp_api/apytypes_common.rst", "cpp_api/apytypes_util.rst", "cpp_api/ieee754.rst", "cpp_api/index.rst", "cpp_api/python_util.rst", "examples/apyfixed.rst", "examples/apyfloat.rst", "examples/index.rst", "examples/sg_execution_times.rst", "index.rst", "sg_execution_times.rst"], "titles": ["<code class=\"docutils literal notranslate\"><span class=\"pre\">APyFixed</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">APyFixedArray</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">APyFloat</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">APyFloatArray</span></code>", "Context handling", "<code class=\"docutils literal notranslate\"><span class=\"pre\">apytypes</span></code> Python package", "Quantization and overflow handling", "Comparison", "<code class=\"docutils literal notranslate\"><span class=\"pre\">APyFixed</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">APyFixedArray</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">APyFloat</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">APyFloatArray</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">apytypes_common.h</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">apytypes_util.h</span></code>", "<code class=\"docutils literal notranslate\"><span class=\"pre\">ieee754.h</span></code>", "APyTypes C++ API", "<code class=\"docutils literal notranslate\"><span class=\"pre\">python_util.h</span></code>", "APyFixed", "APyFloat", "Examples", "Computation times", "Welcome to APyTypes\u2019 documentation!", "Computation times"], "terms": {"class": [0, 1, 2, 3, 4, 6, 8, 9, 10, 11, 12, 13, 17, 18], "apytyp": [0, 1, 2, 3, 4, 6, 7, 17, 18, 19], "configur": [0, 2, 17, 18], "fix": [0, 1, 8, 9], "point": [0, 1, 2, 8, 9, 10, 11, 17, 18], "format": [0, 2, 3, 7, 9, 10, 17, 18], "attribut": [0, 1, 2, 3, 13], "bit": [0, 1, 3, 7, 8, 9, 10, 12, 13, 17, 18], "total": [0, 1, 7, 17, 18, 20, 22], "number": [0, 1, 3, 7, 8, 9, 10, 11, 13, 17, 18], "frac_bit": [0, 1, 8, 9, 12, 13, 17], "fraction": [0, 1, 8, 9, 17], "int_bit": [0, 1, 8, 9, 12, 13, 17], "integ": [0, 1, 8, 9, 13, 16, 17, 18], "is_zero": [0, 8, 10], "true": [0, 2, 14, 17, 18], "store": [0, 1, 3, 9, 11, 13], "valu": [0, 1, 3, 7, 8, 9, 10, 11, 12, 13, 14], "equal": [0, 1, 13], "zero": [0, 2, 8, 9, 13], "fals": [0, 14, 16, 18], "otherwis": 0, "method": [0, 1, 2, 3, 8, 9, 11, 13, 17, 18], "__init__": [0, 1, 2, 3, 4, 6], "properti": [0, 1, 2, 3], "return": [0, 1, 2, 3, 8, 9, 11, 13, 14, 16], "int": [0, 1, 2, 3, 6, 8, 9, 10, 12, 13, 18], "cast": [0, 1, 2, 3, 8, 9, 10, 11, 16, 17, 18], "creat": [0, 1, 7, 9, 11, 18], "new": [0, 1, 9, 16], "resiz": [0, 1, 2, 3, 7, 8, 9, 10, 11], "base": [0, 1, 8], "pattern": [0, 1, 8, 9, 17, 18], "thi": [0, 1, 3, 7, 9, 11, 13, 17, 18], "i": [0, 1, 2, 3, 7, 8, 9, 10, 13, 16, 17, 18, 21], "primari": [0, 1], "perform": [0, 1, 9, 11, 13], "quantiz": [0, 1, 2, 3, 5, 7, 8, 9, 10, 11, 12], "truncat": [0, 1], "overflow": [0, 1, 5, 8, 9, 12, 17], "satur": [0, 1], "when": [0, 1, 8, 13], "deal": [0, 1], "exactli": [0, 1, 13], "two": [0, 1, 2, 3, 7, 8, 9, 10, 11, 13, 17], "three": [0, 1, 13, 17], "specifi": [0, 1, 8, 9, 13], "need": [0, 1], "set": [0, 1, 8, 13, 14], "paramet": [0, 1, 2, 3], "option": [0, 1, 2, 3, 8, 9, 10, 11, 12, 13, 16], "object": [0, 1, 2, 3, 8, 9, 11, 16], "quantizationmod": [0, 1, 2, 3, 6, 8, 9, 10, 11, 12], "default": [0, 1, 8, 9, 12], "trn": [0, 1, 6, 8, 9, 12], "mode": [0, 1, 2, 3, 12], "us": [0, 1, 2, 3, 7, 8, 12, 13, 14, 17, 18, 19], "overflowmod": [0, 1, 6, 8, 9, 12], "wrap": [0, 1, 6, 8, 9, 12, 16], "exampl": [0, 7, 17, 18, 20, 21, 22], "from": [0, 1, 3, 7, 8, 9, 11, 13, 14, 17, 18, 20, 22], "import": [0, 17, 18], "fx": 0, "from_float": [0, 1, 2, 3, 17, 18], "2": [0, 7, 9, 11, 13, 17, 18, 20, 22], "125": 0, "3": [0, 7, 17, 18], "fx_a": 0, "0": [0, 1, 2, 3, 12, 13, 14, 17, 18, 20, 22], "fx_b": 0, "25": [0, 17, 18], "rnd": [0, 6, 12], "": [0, 13], "complement": [0, 13], "fx_c": 0, "1": [0, 1, 2, 3, 7, 9, 11, 13, 17, 18], "875": 0, "nanobind": [0, 1, 2, 3, 8, 9, 11, 16], "nb_func": [0, 1, 2, 3], "from_str": [0, 8, 17], "is_ident": [0, 1, 2, 3, 8, 9, 10, 11], "test": [0, 1, 2, 3, 8, 9, 10, 11, 13, 14], "ar": [0, 1, 2, 3, 7, 8, 9, 10, 11, 13, 17, 18, 19], "ident": [0, 1, 2, 3, 8, 9, 10, 11], "consid": [0, 1, 2, 3, 9, 11, 13], "onli": [0, 1, 2, 3, 8, 9, 11], "thei": [0, 1, 2, 3, 9, 11], "same": [0, 1, 2, 3, 8, 9, 10, 11], "have": [0, 1, 2, 3, 9, 11, 13], "exact": [0, 1, 3, 9, 11], "specif": [0, 1], "more": [0, 13], "restrict": 0, "than": [0, 9, 11, 13], "other": [0, 8, 9, 10, 11, 12], "The": [0, 1, 3, 8, 9, 13, 16, 17, 18], "against": 0, "bool": [0, 1, 2, 3, 8, 9, 10, 11, 12, 13, 14, 16], "4": [0, 7, 17, 18], "assert": 0, "differ": 0, "deprec": [0, 1, 2, 3], "sinc": [0, 1, 2, 3, 7], "version": [0, 1, 2, 3, 14], "pre": [0, 1, 2, 3], "instead": [0, 1, 2, 3], "to_bit": [0, 2, 8, 10], "retriev": [0, 8, 9, 11, 13, 16], "underli": [0, 8, 9, 13, 17], "an": [0, 7, 9, 11, 13], "5": [0, 2, 3, 7, 17, 18], "75": [0, 17], "164": 0, "0xa4": 0, "0b10100100": 0, "t": [1, 3, 13, 16], "transposit": [1, 3, 9, 11], "arrai": [1, 3, 7, 9, 11, 13], "ndim": [1, 3, 9], "dimens": [1, 3, 9, 11], "shape": [1, 3, 9, 11, 16], "equival": [1, 3], "call": [1, 3], "transpos": [1, 3, 9, 11], "repres": [1, 3, 9, 11, 17], "exatli": [1, 3, 9, 11], "tensor": [1, 3, 9, 11], "all": [1, 3, 9, 11, 14, 19, 22], "element": [1, 3, 8, 9, 11, 13], "tupl": [1, 3, 9, 11], "to_numpi": [1, 3, 9, 11], "numpi": [1, 3, 7, 9, 11], "ndarrai": [1, 3, 9, 11], "float64": [1, 3], "ha": [1, 3, 8, 10], "self": [1, 2, 3], "round": [1, 3, 7], "awai": [1, 3, 14], "infin": [1, 3], "ti": [1, 3], "If": [1, 2, 3, 9, 11, 13, 16], "one": [1, 3, 13, 14, 18], "copi": [1, 3, 9, 11], "matrix": [1, 3, 9, 11], "higher": [1, 3], "order": [1, 3], "been": [1, 3], "implement": [1, 3, 7, 13], "rais": [1, 3, 16], "notimplementedexcept": [1, 3, 13], "float": [2, 3, 10, 11, 17, 18], "bia": [2, 3, 10, 11, 12], "exp": [2, 10, 12, 14, 18], "exp_bit": [2, 3, 10, 11, 12, 18], "is_finit": [2, 10], "x": [2, 10, 13], "subnorm": 2, "normal": 2, "is_inf": [2, 10], "infinit": 2, "is_nan": [2, 10], "nan": 2, "is_norm": [2, 10], "is_subnorm": [2, 10], "man": [2, 10, 12, 14, 18], "man_bit": [2, 3, 10, 11, 12, 18], "sign": [2, 10, 12, 14, 18], "cast_to_bfloat16": [2, 3, 10, 11], "bfloat16": [2, 3], "conveni": [2, 3, 17, 18], "correspond": [2, 3, 18], "f": [2, 3], "8": [2, 3, 13, 18], "7": [2, 3, 17, 18], "provid": [2, 3, 7, 13, 17, 18], "global": [2, 3], "see": [2, 3], "get_quantization_mod": [2, 3, 6, 12], "cast_to_doubl": [2, 3, 10, 11], "ieee": [2, 3], "754": [2, 3], "binary64": [2, 3], "doubl": [2, 3, 7, 8, 9, 10, 11, 13, 14], "precis": [2, 3], "11": [2, 3], "52": [2, 3], "cast_to_half": [2, 3, 10, 11], "binary16": [2, 3], "half": [2, 3], "10": [2, 3, 8, 17], "cast_to_singl": [2, 3, 10, 11], "binary32": [2, 3], "singl": [2, 3, 9, 11, 14, 17], "23": [2, 3, 17], "from_bit": [2, 10, 18], "apyfix": [2, 5, 9, 12, 15, 19, 20, 22], "expon": [2, 3, 7, 14, 18], "mantissa": [2, 3, 7, 14, 18], "pretty_str": [2, 10], "ppint": 3, "quantizationcontext": [4, 12], "accumulatorcontext": [4, 12], "apyfixedarrai": [5, 8, 15], "apyfloat": [5, 11, 12, 15, 19, 20, 22], "apyfloatarrai": [5, 15], "handl": 5, "context": 5, "jam": [6, 12], "_apytyp": 6, "jam_unbias": [6, 12], "ties_po": 6, "rnd_conv": [6, 12], "ties_even": 6, "rnd_conv_odd": [6, 12], "ties_odd": 6, "rnd_inf": [6, 12], "ties_awai": 6, "rnd_min_inf": [6, 12], "ties_neg": 6, "rnd_zero": [6, 12], "ties_zero": 6, "stoch_equ": [6, 12], "stoch_weight": [6, 12], "to_neg": 6, "to_po": 6, "to_zero": 6, "trn_inf": [6, 12], "trn_zero": [6, 12], "arg": 6, "kwarg": 6, "numeric_std": [6, 12], "sat": [6, 12], "set_quantization_mod": [6, 12], "none": [6, 7], "get_quantization_se": [6, 12], "set_quantization_se": [6, 12], "fixedpoint": 7, "fpbinari": 7, "fxpmath": 7, "numfi": 7, "pyfixp": 7, "spfpm": 7, "custom": 7, "ye": 7, "No": [7, 8, 9], "maximum": [7, 17, 18], "wordlength": [7, 18], "64": [7, 13], "53": 7, "result": [7, 8, 9, 13, 17, 18], "multipl": [7, 9, 11, 17], "n": [7, 10, 13], "A": [7, 17], "written": 7, "c": [7, 14, 17, 18, 21], "python": [7, 8, 9, 11, 16, 17, 18, 19, 21], "footnot": 7, "limit": 7, "includ": [7, 13, 17], "e": [7, 8, 10, 13], "g": [7, 13], "essenti": 7, "packag": [7, 21], "simpli": 7, "helper": [7, 13], "function": [7, 8, 9, 10, 11, 12, 13, 14, 16], "convert": [7, 8, 9, 11, 13, 16], "list": [7, 13], "note": 7, "hold": 7, "intermedi": 7, "well": 7, "For": [7, 9, 11, 17], "multipli": [7, 13], "27": 7, "54": 7, "which": 7, "give": 7, "accur": 7, "gmpy2": 7, "binari": [7, 13], "represent": [7, 8, 10], "32": 7, "6": [7, 17], "stochast": 7, "mean": [7, 9], "possibl": 7, "get": 7, "hardwar": 7, "design": [7, 21], "choic": 7, "aim": 7, "simul": [7, 21], "shorter": 7, "howev": [7, 17, 18], "unlimit": 7, "word": [7, 8, 9, 13, 17, 18, 21], "length": [7, 8, 9, 11, 13, 17, 18, 21], "support": [7, 9, 14, 17, 18], "can": [7, 16, 17, 18, 19], "compar": 7, "relev": 7, "abov": 7, "It": 7, "updat": 7, "everi": [7, 13, 16], "document": 7, "build": 7, "mai": [7, 9], "vari": 7, "over": [7, 13], "time": [7, 17, 18], "code": [7, 17, 18, 19], "further": 7, "optim": [7, 14], "public": [8, 9, 10, 11, 12, 13], "delet": [8, 9], "construct": [8, 9], "type": [8, 9, 11, 14, 16], "explicit": [8, 9, 10, 11], "int_": [8, 16], "python_long_int_bit_pattern": 8, "std": [8, 9, 10, 11, 12, 13, 16], "nullopt": [8, 9, 10, 11, 12, 13, 16], "constructor": [8, 9], "arbitrari": [8, 13, 16], "long": [8, 10, 16], "const": [8, 9, 10, 11, 12, 13, 16], "initi": [8, 9, 11], "size": [8, 9, 11, 13, 16], "anoth": [8, 9, 16], "data": [8, 9, 10, 13], "templat": [8, 13, 16], "typenam": [8, 13, 16], "_it": 8, "begin": 8, "end": [8, 17, 18], "vector": [8, 9, 13, 16], "iter": [8, 13, 16], "mp_limb_t": [8, 9, 13, 16], "vec": [8, 13, 16], "oper": [8, 9, 10, 11, 12, 17, 18], "rh": [8, 9, 10, 11], "shift_val": [8, 9], "inlin": [8, 9, 10, 11, 12, 13], "noexcept": [8, 9], "size_t": [8, 9, 11, 13, 16], "vector_s": 8, "limb": [8, 13, 16], "unari": [8, 9], "negat": [8, 9, 13], "ab": [8, 9, 10], "absolut": [8, 9, 13], "is_neg": [8, 16], "neg": [8, 13], "is_posit": 8, "posit": [8, 13], "increment_lsb": 8, "increment": 8, "lsb": [8, 13], "without": [8, 14, 18], "make": [8, 17], "wider": 8, "carri": [8, 13], "out": [8, 13, 17], "string": [8, 9, 10, 11, 12, 13, 17, 18], "bit_pattern_to_string_dec": 8, "decim": [8, 13], "repr": [8, 9, 10, 11], "verbos": 8, "latex": [8, 10], "to_doubl": [8, 10], "to_str": 8, "to_string_hex": 8, "to_string_oct": 8, "to_string_dec": 8, "void": [8, 12, 13, 14], "set_from_doubl": 8, "set_from_apyfix": 8, "set_from_str": 8, "str": [8, 10, 13, 17, 18], "set_from_string_hex": 8, "set_from_string_oct": 8, "set_from_string_dec": 8, "publicli": 8, "expos": 8, "cast_correct_wl": 8, "it_begin": [8, 13], "it_end": [8, 13], "new_bit": [8, 13], "new_int_bit": 8, "intern": 8, "known": 8, "correct": 8, "output": [8, 13], "place": [8, 9, 13], "onto": [8, 13], "its": 8, "requir": 8, "distanc": 8, "bits_to_limb": [8, 13], "static": [8, 9, 10, 11, 12, 13, 14, 16], "from_doubl": [8, 9, 10, 11], "string_valu": 8, "friend": 8, "apybuff": 9, "empti": 9, "sequenc": [9, 11, 16], "bit_pattern_sequ": [9, 16], "rsub": 9, "matmul": [9, 11], "mutlipl": [9, 11], "both": [9, 11], "argument": [9, 11, 13, 14], "d": [9, 11, 14], "ordinari": [9, 11], "input": [9, 11, 13], "greater": [9, 11], "stack": [9, 11], "where": [9, 11, 13], "last": [9, 11], "treat": [9, 11], "matric": [9, 11], "__repr__": [9, 11], "get_item": [9, 11], "idx": [9, 11], "item": [9, 11], "elementwis": 9, "each": 9, "lower": 9, "oveflow": 9, "narrow": 9, "double_seq": [9, 11], "exp_t": [10, 11, 12], "man_t": [10, 12], "uint8_t": [10, 11, 12, 13], "apyfloatdata": [10, 12], "unsign": [10, 13, 16], "get_sign": 10, "get_man": 10, "get_exp": 10, "get_bia": [10, 11], "get_man_bit": [10, 11], "get_exp_bit": [10, 11], "get_data": 10, "pow": 10, "y": 10, "pown": 10, "ieee_bia": 10, "enum": [11, 12], "arithmeticoper": 11, "enumer": [11, 12], "addit": [11, 17], "subtract": [11, 13, 17], "divis": 11, "sign_seq": 11, "exp_seq": 11, "man_seq": 11, "get_shap": 11, "get_ndim": 11, "get_siz": 11, "field": 11, "typedef": 12, "uint32_t": 12, "uint64_t": [12, 13, 14], "avail": [12, 14], "apy_inlin": [12, 13, 14, 16], "quantization_mode_to_str": 12, "overflow_mode_to_str": 12, "random_numb": 12, "accumulatoropt": 12, "get_accumulator_mod": 12, "contextmanag": 12, "subclass": 12, "virtual": 12, "enter_context": 12, "exit_context": 12, "new_mod": 12, "new_se": 12, "overrid": 12, "privat": 12, "member": [12, 13], "prev_mod": 12, "prev_se": 12, "struct": [12, 13], "current_mod": 12, "previous_mod": 12, "defin": [13, 16], "count_trailing_bit": 13, "val": 13, "count": 13, "trail": 13, "after": 13, "most": [13, 14], "signific": 13, "quickli": 13, "evalu": 13, "how": [13, 19], "mani": 13, "requier": 13, "significant_limb": 13, "bit_width": 13, "ceil": 13, "log2": 13, "non": 13, "limb_vector_leading_zero": 13, "nibble_width": 13, "nibbl": 13, "to_nibble_list": 13, "data_arrai": 13, "len": 13, "contain": 13, "least": 13, "first": [13, 16], "indic": 13, "intend": 13, "bcd": 13, "rend": 13, "remov": 13, "from_nibble_list": 13, "nibble_list": 13, "assum": 13, "nibble_list_shift_left_onc": 13, "shift": 13, "left": 13, "stage": 13, "modifi": 13, "content": 13, "back": 13, "nibble_list_shift_right_onc": 13, "right": 13, "double_dabbl": 13, "nibble_data": 13, "dabbl": 13, "algorithm": 13, "convers": 13, "bcds_to_str": 13, "reverse_double_dabbl": 13, "bcd_list": 13, "revers": 13, "bcd_limb_vec_div2": 13, "divid": 13, "bcd_limb_vec_mul2": 13, "bcd_mul2": 13, "front": 13, "string_trim_leading_whitespac": 13, "trim": 13, "lead": 13, "whitespac": 13, "string_trim_trailing_whitespac": 13, "string_trim_whitespac": 13, "is_valid_decimal_numeric_str": 13, "valid": 13, "numer": 13, "string_trim_zero": 13, "unnecessari": 13, "don": 13, "affect": 13, "also": [13, 17, 18], "attach": 13, "start": 13, "dot": 13, "digit": 13, "00": [13, 20, 22], "limb_vector_asr": 13, "shift_amnt": 13, "arithmet": [13, 17, 18], "acceler": 13, "gmp": [13, 16], "limb_vector_lsr": 13, "logic": 13, "limb_vector_lsl": 13, "limb_vector_add_pow2": 13, "add": 13, "power": 13, "limb_vector_sub_pow2": 13, "borrow": 13, "bits_from_opt": 13, "user": 13, "throw": 13, "nb": [13, 16], "value_error": 13, "less": 13, "present": 13, "int_bits_from_opt": 13, "limb_vector_is_neg": 13, "const_iter": 13, "cbegin_it": 13, "cend_it": 13, "limb_vector_or_reduc": 13, "reduc": 13, "bitwis": 13, "limb_vector_test_bit": 13, "th": 13, "limb_vector_set_bit": 13, "begin_it": 13, "end_it": 13, "index": [13, 21], "limb_vector_neg": 13, "res_it": 13, "extend": 13, "constant": 13, "refer": 13, "guarante": 13, "limb_vector_ab": 13, "take": 13, "string_from_vec": 13, "variabl": 13, "constexpr": 13, "_limb_size_byt": 13, "sizeof": 13, "_limb_size_bit": 13, "logic_error": 13, "Not": 13, "except": [13, 16], "msg": 13, "doubledabblelist": 13, "propor": 13, "dabl": 13, "do_doubl": 13, "do": [13, 17, 18], "do_dabbl": 13, "do_reverse_doubl": 13, "limb_out": 13, "do_reverse_dabbl": 13, "_nibble_mask": 13, "0x1111111111111111": 13, "0x11111111": 13, "mask": 13, "possit": 13, "_machine_is_native_little_endian": 14, "target": 14, "machin": 14, "nativ": 14, "endian": 14, "pure": 14, "depend": [14, 17], "17": [14, 18], "compat": 14, "compil": 14, "godbolt": 14, "org": 14, "gcc": 14, "clang": 14, "msvc": 14, "explor": 14, "type_pun_double_to_uint64_t": 14, "type_pun_uint64_t_to_doubl": 14, "num": 14, "sign_of_doubl": 14, "int64_t": 14, "exp_of_doubl": 14, "bias": 14, "rang": 14, "2048": 14, "man_of_doubl": 14, "significand": 14, "hidden": [14, 18], "4503599627370496": 14, "set_sign_of_doubl": 14, "un": 14, "set_exp_of_doubl": 14, "part": 14, "domain": 14, "set_man_of_doubl": 14, "poart": 14, "apytypes_common": 15, "h": 15, "apytypes_util": 15, "ieee754": 15, "python_util": 15, "pylong_setsignanddigitcount": 16, "obj": 16, "get_ob_digit": 16, "pylong_isneg": 16, "pylong_digitcount": 16, "pylongobject": 16, "pylong_new": 16, "python_digit": 16, "creation": 16, "python_long_to_limb_vec": 16, "py_long_int": 16, "n_exact_limb": 16, "python_limb_vec_to_long": 16, "vec_is_sign": 16, "bits_last_limb": 16, "pybind11": 16, "python_sequence_extract_shap": 16, "possibli": 16, "nest": 16, "pytyp": 16, "python_sequence_walk": 16, "py_seq": 16, "walk": 16, "via": 16, "them": 16, "depth": 16, "search": [16, 21], "manner": 16, "ani": 16, "doe": [16, 17], "match": 16, "runtime_error": 16, "go": [17, 18], "download": [17, 18, 19], "full": [17, 18], "either": [17, 18], "One": 17, "suppli": 17, "must": 17, "b": [17, 18], "30": [17, 18], "standard": [17, 18], "ad": 17, "sure": 17, "comput": 17, "62": 17, "sum": 17, "operand": 17, "respect": 17, "210": 17, "comparison": [17, 18, 21], "To": [17, 18], "chang": [17, 18], "15": 17, "run": [17, 18], "script": [17, 18], "minut": [17, 18], "002": [17, 20, 22], "second": [17, 18], "jupyt": [17, 18, 19], "notebook": [17, 18, 19], "ipynb": [17, 18], "sourc": [17, 18, 19], "py": [17, 18, 20, 22], "galleri": [17, 18, 19, 22], "gener": [17, 18, 19], "sphinx": [17, 18, 19], "10110101": 18, "involv": 18, "term": 18, "0722656": 18, "005": [18, 20, 22], "These": 19, "examples_python": 19, "zip": 19, "examples_jupyt": 19, "006": [20, 22], "execut": [20, 22], "file": [20, 22], "mem": [20, 22], "mb": [20, 22], "librari": 21, "simplifi": 21, "finit": 21, "api": 21, "modul": 21, "page": 21}, "objects": {"": [[13, 0, 1, "c.APY_INLINE", "APY_INLINE"], [16, 0, 1, "c.GET_OB_DIGIT", "GET_OB_DIGIT"], [16, 0, 1, "c.PyLong_DigitCount", "PyLong_DigitCount"], [16, 0, 1, "c.PyLong_IsNegative", "PyLong_IsNegative"], [16, 0, 1, "c.PyLong_SetSignAndDigitCount", "PyLong_SetSignAndDigitCount"], [8, 1, 1, "_CPPv48APyFixed", "APyFixed"], [8, 2, 1, "_CPPv4I0EN8APyFixed8APyFixedEii3_IT3_IT", "APyFixed::APyFixed"], [8, 2, 1, "_CPPv4N8APyFixed8APyFixedEN8nanobind4int_ENSt8optionalIiEENSt8optionalIiEENSt8optionalIiEE", "APyFixed::APyFixed"], [8, 2, 1, "_CPPv4N8APyFixed8APyFixedENSt8optionalIiEENSt8optionalIiEENSt8optionalIiEE", "APyFixed::APyFixed"], [8, 2, 1, "_CPPv4N8APyFixed8APyFixedERK8APyFixed", "APyFixed::APyFixed"], [8, 2, 1, "_CPPv4N8APyFixed8APyFixedEii", "APyFixed::APyFixed"], [8, 2, 1, "_CPPv4N8APyFixed8APyFixedEiiRKNSt6vectorI9mp_limb_tEE", "APyFixed::APyFixed"], [8, 2, 1, "_CPPv4N8APyFixed8APyFixedEv", "APyFixed::APyFixed"], [8, 3, 1, "_CPPv4I0EN8APyFixed8APyFixedEii3_IT3_IT", "APyFixed::APyFixed::_IT"], [8, 4, 1, "_CPPv4I0EN8APyFixed8APyFixedEii3_IT3_IT", "APyFixed::APyFixed::begin"], [8, 4, 1, "_CPPv4I0EN8APyFixed8APyFixedEii3_IT3_IT", "APyFixed::APyFixed::bits"], [8, 4, 1, "_CPPv4N8APyFixed8APyFixedEN8nanobind4int_ENSt8optionalIiEENSt8optionalIiEENSt8optionalIiEE", "APyFixed::APyFixed::bits"], [8, 4, 1, "_CPPv4N8APyFixed8APyFixedENSt8optionalIiEENSt8optionalIiEENSt8optionalIiEE", "APyFixed::APyFixed::bits"], [8, 4, 1, "_CPPv4N8APyFixed8APyFixedEii", "APyFixed::APyFixed::bits"], [8, 4, 1, "_CPPv4N8APyFixed8APyFixedEiiRKNSt6vectorI9mp_limb_tEE", "APyFixed::APyFixed::bits"], [8, 4, 1, "_CPPv4I0EN8APyFixed8APyFixedEii3_IT3_IT", "APyFixed::APyFixed::end"], [8, 4, 1, "_CPPv4N8APyFixed8APyFixedEN8nanobind4int_ENSt8optionalIiEENSt8optionalIiEENSt8optionalIiEE", "APyFixed::APyFixed::frac_bits"], [8, 4, 1, "_CPPv4N8APyFixed8APyFixedENSt8optionalIiEENSt8optionalIiEENSt8optionalIiEE", "APyFixed::APyFixed::frac_bits"], [8, 4, 1, "_CPPv4I0EN8APyFixed8APyFixedEii3_IT3_IT", "APyFixed::APyFixed::int_bits"], [8, 4, 1, "_CPPv4N8APyFixed8APyFixedEN8nanobind4int_ENSt8optionalIiEENSt8optionalIiEENSt8optionalIiEE", "APyFixed::APyFixed::int_bits"], [8, 4, 1, "_CPPv4N8APyFixed8APyFixedENSt8optionalIiEENSt8optionalIiEENSt8optionalIiEE", "APyFixed::APyFixed::int_bits"], [8, 4, 1, "_CPPv4N8APyFixed8APyFixedEii", "APyFixed::APyFixed::int_bits"], [8, 4, 1, "_CPPv4N8APyFixed8APyFixedEiiRKNSt6vectorI9mp_limb_tEE", "APyFixed::APyFixed::int_bits"], [8, 4, 1, "_CPPv4N8APyFixed8APyFixedERK8APyFixed", "APyFixed::APyFixed::other"], [8, 4, 1, "_CPPv4N8APyFixed8APyFixedEN8nanobind4int_ENSt8optionalIiEENSt8optionalIiEENSt8optionalIiEE", "APyFixed::APyFixed::python_long_int_bit_pattern"], [8, 4, 1, "_CPPv4N8APyFixed8APyFixedEiiRKNSt6vectorI9mp_limb_tEE", "APyFixed::APyFixed::vec"], [8, 2, 1, "_CPPv4NK8APyFixed3absEv", "APyFixed::abs"], [8, 2, 1, "_CPPv4NK8APyFixed25bit_pattern_to_string_decEv", "APyFixed::bit_pattern_to_string_dec"], [8, 2, 1, "_CPPv4NK8APyFixed4bitsEv", "APyFixed::bits"], [8, 2, 1, "_CPPv4NK8APyFixed4castENSt8optionalIiEENSt8optionalIiEE16QuantizationMode12OverflowModeNSt8optionalIiEE", "APyFixed::cast"], [8, 4, 1, "_CPPv4NK8APyFixed4castENSt8optionalIiEENSt8optionalIiEE16QuantizationMode12OverflowModeNSt8optionalIiEE", "APyFixed::cast::bits"], [8, 4, 1, "_CPPv4NK8APyFixed4castENSt8optionalIiEENSt8optionalIiEE16QuantizationMode12OverflowModeNSt8optionalIiEE", "APyFixed::cast::frac_bits"], [8, 4, 1, "_CPPv4NK8APyFixed4castENSt8optionalIiEENSt8optionalIiEE16QuantizationMode12OverflowModeNSt8optionalIiEE", "APyFixed::cast::int_bits"], [8, 4, 1, "_CPPv4NK8APyFixed4castENSt8optionalIiEENSt8optionalIiEE16QuantizationMode12OverflowModeNSt8optionalIiEE", "APyFixed::cast::overflow"], [8, 4, 1, "_CPPv4NK8APyFixed4castENSt8optionalIiEENSt8optionalIiEE16QuantizationMode12OverflowModeNSt8optionalIiEE", "APyFixed::cast::quantization"], [8, 2, 1, "_CPPv4NK8APyFixed15cast_correct_wlENSt6vectorI9mp_limb_tE8iteratorENSt6vectorI9mp_limb_tE8iteratorEii", "APyFixed::cast_correct_wl"], [8, 4, 1, "_CPPv4NK8APyFixed15cast_correct_wlENSt6vectorI9mp_limb_tE8iteratorENSt6vectorI9mp_limb_tE8iteratorEii", "APyFixed::cast_correct_wl::it_begin"], [8, 4, 1, "_CPPv4NK8APyFixed15cast_correct_wlENSt6vectorI9mp_limb_tE8iteratorENSt6vectorI9mp_limb_tE8iteratorEii", "APyFixed::cast_correct_wl::it_end"], [8, 4, 1, "_CPPv4NK8APyFixed15cast_correct_wlENSt6vectorI9mp_limb_tE8iteratorENSt6vectorI9mp_limb_tE8iteratorEii", "APyFixed::cast_correct_wl::new_bits"], [8, 4, 1, "_CPPv4NK8APyFixed15cast_correct_wlENSt6vectorI9mp_limb_tE8iteratorENSt6vectorI9mp_limb_tE8iteratorEii", "APyFixed::cast_correct_wl::new_int_bits"], [8, 2, 1, "_CPPv4NK8APyFixed9frac_bitsEv", "APyFixed::frac_bits"], [8, 2, 1, "_CPPv4N8APyFixed11from_doubleEdNSt8optionalIiEENSt8optionalIiEENSt8optionalIiEE", "APyFixed::from_double"], [8, 4, 1, "_CPPv4N8APyFixed11from_doubleEdNSt8optionalIiEENSt8optionalIiEENSt8optionalIiEE", "APyFixed::from_double::bits"], [8, 4, 1, "_CPPv4N8APyFixed11from_doubleEdNSt8optionalIiEENSt8optionalIiEENSt8optionalIiEE", "APyFixed::from_double::frac_bits"], [8, 4, 1, "_CPPv4N8APyFixed11from_doubleEdNSt8optionalIiEENSt8optionalIiEENSt8optionalIiEE", "APyFixed::from_double::int_bits"], [8, 4, 1, "_CPPv4N8APyFixed11from_doubleEdNSt8optionalIiEENSt8optionalIiEENSt8optionalIiEE", "APyFixed::from_double::value"], [8, 2, 1, "_CPPv4N8APyFixed11from_stringENSt6stringENSt8optionalIiEENSt8optionalIiEEiNSt8optionalIiEE", "APyFixed::from_string"], [8, 4, 1, "_CPPv4N8APyFixed11from_stringENSt6stringENSt8optionalIiEENSt8optionalIiEEiNSt8optionalIiEE", "APyFixed::from_string::base"], [8, 4, 1, "_CPPv4N8APyFixed11from_stringENSt6stringENSt8optionalIiEENSt8optionalIiEEiNSt8optionalIiEE", "APyFixed::from_string::bits"], [8, 4, 1, "_CPPv4N8APyFixed11from_stringENSt6stringENSt8optionalIiEENSt8optionalIiEEiNSt8optionalIiEE", "APyFixed::from_string::frac_bits"], [8, 4, 1, "_CPPv4N8APyFixed11from_stringENSt6stringENSt8optionalIiEENSt8optionalIiEEiNSt8optionalIiEE", "APyFixed::from_string::int_bits"], [8, 4, 1, "_CPPv4N8APyFixed11from_stringENSt6stringENSt8optionalIiEENSt8optionalIiEEiNSt8optionalIiEE", "APyFixed::from_string::string_value"], [8, 2, 1, "_CPPv4N8APyFixed13increment_lsbEv", "APyFixed::increment_lsb"], [8, 2, 1, "_CPPv4NK8APyFixed8int_bitsEv", "APyFixed::int_bits"], [8, 2, 1, "_CPPv4NK8APyFixed12is_identicalERK8APyFixed", "APyFixed::is_identical"], [8, 4, 1, "_CPPv4NK8APyFixed12is_identicalERK8APyFixed", "APyFixed::is_identical::other"], [8, 2, 1, "_CPPv4NK8APyFixed11is_negativeEv", "APyFixed::is_negative"], [8, 2, 1, "_CPPv4NK8APyFixed11is_positiveEv", "APyFixed::is_positive"], [8, 2, 1, "_CPPv4NK8APyFixed7is_zeroEv", "APyFixed::is_zero"], [8, 2, 1, "_CPPv4NK8APyFixed5latexEv", "APyFixed::latex"], [8, 2, 1, "_CPPv4NK8APyFixedcvdEv", "APyFixed::operator double"], [8, 2, 1, "_CPPv4NK8APyFixedneERK8APyFixed", "APyFixed::operator!="], [8, 4, 1, "_CPPv4NK8APyFixedneERK8APyFixed", "APyFixed::operator!=::rhs"], [8, 2, 1, "_CPPv4NK8APyFixedmlERK8APyFixed", "APyFixed::operator*"], [8, 2, 1, "_CPPv4NK8APyFixedmlEi", "APyFixed::operator*"], [8, 4, 1, "_CPPv4NK8APyFixedmlERK8APyFixed", "APyFixed::operator*::rhs"], [8, 4, 1, "_CPPv4NK8APyFixedmlEi", "APyFixed::operator*::rhs"], [8, 2, 1, "_CPPv4NK8APyFixedplERK8APyFixed", "APyFixed::operator+"], [8, 2, 1, "_CPPv4NK8APyFixedplEi", "APyFixed::operator+"], [8, 4, 1, "_CPPv4NK8APyFixedplERK8APyFixed", "APyFixed::operator+::rhs"], [8, 4, 1, "_CPPv4NK8APyFixedplEi", "APyFixed::operator+::rhs"], [8, 2, 1, "_CPPv4NK8APyFixedmiERK8APyFixed", "APyFixed::operator-"], [8, 2, 1, "_CPPv4NK8APyFixedmiEi", "APyFixed::operator-"], [8, 2, 1, "_CPPv4NK8APyFixedmiEv", "APyFixed::operator-"], [8, 4, 1, "_CPPv4NK8APyFixedmiERK8APyFixed", "APyFixed::operator-::rhs"], [8, 4, 1, "_CPPv4NK8APyFixedmiEi", "APyFixed::operator-::rhs"], [8, 2, 1, "_CPPv4NK8APyFixeddvERK8APyFixed", "APyFixed::operator/"], [8, 2, 1, "_CPPv4NK8APyFixeddvEi", "APyFixed::operator/"], [8, 4, 1, "_CPPv4NK8APyFixeddvERK8APyFixed", "APyFixed::operator/::rhs"], [8, 4, 1, "_CPPv4NK8APyFixeddvEi", "APyFixed::operator/::rhs"], [8, 2, 1, "_CPPv4NK8APyFixedltERK8APyFixed", "APyFixed::operator&lt;"], [8, 4, 1, "_CPPv4NK8APyFixedltERK8APyFixed", "APyFixed::operator&lt;::rhs"], [8, 2, 1, "_CPPv4NK8APyFixedlsEKi", "APyFixed::operator&lt;&lt;"], [8, 4, 1, "_CPPv4NK8APyFixedlsEKi", "APyFixed::operator&lt;&lt;::shift_val"], [8, 2, 1, "_CPPv4N8APyFixedlSEKi", "APyFixed::operator&lt;&lt;="], [8, 4, 1, "_CPPv4N8APyFixedlSEKi", "APyFixed::operator&lt;&lt;=::shift_val"], [8, 2, 1, "_CPPv4NK8APyFixedleERK8APyFixed", "APyFixed::operator&lt;="], [8, 4, 1, "_CPPv4NK8APyFixedleERK8APyFixed", "APyFixed::operator&lt;=::rhs"], [8, 2, 1, "_CPPv4NK8APyFixedeqERK8APyFixed", "APyFixed::operator=="], [8, 4, 1, "_CPPv4NK8APyFixedeqERK8APyFixed", "APyFixed::operator==::rhs"], [8, 2, 1, "_CPPv4NK8APyFixedgtERK8APyFixed", "APyFixed::operator&gt;"], [8, 4, 1, "_CPPv4NK8APyFixedgtERK8APyFixed", "APyFixed::operator&gt;::rhs"], [8, 2, 1, "_CPPv4NK8APyFixedgeERK8APyFixed", "APyFixed::operator&gt;="], [8, 4, 1, "_CPPv4NK8APyFixedgeERK8APyFixed", "APyFixed::operator&gt;=::rhs"], [8, 2, 1, "_CPPv4NK8APyFixedrsEKi", "APyFixed::operator&gt;&gt;"], [8, 4, 1, "_CPPv4NK8APyFixedrsEKi", "APyFixed::operator&gt;&gt;::shift_val"], [8, 2, 1, "_CPPv4N8APyFixedrSEKi", "APyFixed::operator&gt;&gt;="], [8, 4, 1, "_CPPv4N8APyFixedrSEKi", "APyFixed::operator&gt;&gt;=::shift_val"], [8, 2, 1, "_CPPv4NK8APyFixed4reprEv", "APyFixed::repr"], [8, 2, 1, "_CPPv4NK8APyFixed6resizeENSt8optionalIiEENSt8optionalIiEE16QuantizationMode12OverflowModeNSt8optionalIiEE", "APyFixed::resize"], [8, 4, 1, "_CPPv4NK8APyFixed6resizeENSt8optionalIiEENSt8optionalIiEE16QuantizationMode12OverflowModeNSt8optionalIiEE", "APyFixed::resize::bits"], [8, 4, 1, "_CPPv4NK8APyFixed6resizeENSt8optionalIiEENSt8optionalIiEE16QuantizationMode12OverflowModeNSt8optionalIiEE", "APyFixed::resize::frac_bits"], [8, 4, 1, "_CPPv4NK8APyFixed6resizeENSt8optionalIiEENSt8optionalIiEE16QuantizationMode12OverflowModeNSt8optionalIiEE", "APyFixed::resize::int_bits"], [8, 4, 1, "_CPPv4NK8APyFixed6resizeENSt8optionalIiEENSt8optionalIiEE16QuantizationMode12OverflowModeNSt8optionalIiEE", "APyFixed::resize::overflow"], [8, 4, 1, "_CPPv4NK8APyFixed6resizeENSt8optionalIiEENSt8optionalIiEE16QuantizationMode12OverflowModeNSt8optionalIiEE", "APyFixed::resize::quantization"], [8, 2, 1, "_CPPv4N8APyFixed17set_from_apyfixedERK8APyFixed", "APyFixed::set_from_apyfixed"], [8, 4, 1, "_CPPv4N8APyFixed17set_from_apyfixedERK8APyFixed", "APyFixed::set_from_apyfixed::fixed"], [8, 2, 1, "_CPPv4N8APyFixed15set_from_doubleEd", "APyFixed::set_from_double"], [8, 4, 1, "_CPPv4N8APyFixed15set_from_doubleEd", "APyFixed::set_from_double::value"], [8, 2, 1, "_CPPv4N8APyFixed15set_from_stringERKNSt6stringEi", "APyFixed::set_from_string"], [8, 4, 1, "_CPPv4N8APyFixed15set_from_stringERKNSt6stringEi", "APyFixed::set_from_string::base"], [8, 4, 1, "_CPPv4N8APyFixed15set_from_stringERKNSt6stringEi", "APyFixed::set_from_string::str"], [8, 2, 1, "_CPPv4N8APyFixed19set_from_string_decERKNSt6stringE", "APyFixed::set_from_string_dec"], [8, 4, 1, "_CPPv4N8APyFixed19set_from_string_decERKNSt6stringE", "APyFixed::set_from_string_dec::str"], [8, 2, 1, "_CPPv4N8APyFixed19set_from_string_hexERKNSt6stringE", "APyFixed::set_from_string_hex"], [8, 4, 1, "_CPPv4N8APyFixed19set_from_string_hexERKNSt6stringE", "APyFixed::set_from_string_hex::str"], [8, 2, 1, "_CPPv4N8APyFixed19set_from_string_octERKNSt6stringE", "APyFixed::set_from_string_oct"], [8, 4, 1, "_CPPv4N8APyFixed19set_from_string_octERKNSt6stringE", "APyFixed::set_from_string_oct::str"], [8, 2, 1, "_CPPv4NK8APyFixed7to_bitsEv", "APyFixed::to_bits"], [8, 2, 1, "_CPPv4NK8APyFixed9to_doubleEv", "APyFixed::to_double"], [8, 2, 1, "_CPPv4NK8APyFixed9to_stringEi", "APyFixed::to_string"], [8, 4, 1, "_CPPv4NK8APyFixed9to_stringEi", "APyFixed::to_string::base"], [8, 2, 1, "_CPPv4NK8APyFixed13to_string_decEv", "APyFixed::to_string_dec"], [8, 2, 1, "_CPPv4NK8APyFixed13to_string_hexEv", "APyFixed::to_string_hex"], [8, 2, 1, "_CPPv4NK8APyFixed13to_string_octEv", "APyFixed::to_string_oct"], [8, 2, 1, "_CPPv4NK8APyFixed11vector_sizeEv", "APyFixed::vector_size"], [9, 1, 1, "_CPPv413APyFixedArray", "APyFixedArray"], [9, 2, 1, "_CPPv4N13APyFixedArray13APyFixedArrayERKN8nanobind8sequenceENSt8optionalIiEENSt8optionalIiEENSt8optionalIiEE", "APyFixedArray::APyFixedArray"], [9, 2, 1, "_CPPv4N13APyFixedArray13APyFixedArrayERKNSt6vectorINSt6size_tEEENSt8optionalIiEENSt8optionalIiEENSt8optionalIiEE", "APyFixedArray::APyFixedArray"], [9, 2, 1, "_CPPv4N13APyFixedArray13APyFixedArrayEv", "APyFixedArray::APyFixedArray"], [9, 4, 1, "_CPPv4N13APyFixedArray13APyFixedArrayERKN8nanobind8sequenceENSt8optionalIiEENSt8optionalIiEENSt8optionalIiEE", "APyFixedArray::APyFixedArray::bit_pattern_sequence"], [9, 4, 1, "_CPPv4N13APyFixedArray13APyFixedArrayERKN8nanobind8sequenceENSt8optionalIiEENSt8optionalIiEENSt8optionalIiEE", "APyFixedArray::APyFixedArray::bits"], [9, 4, 1, "_CPPv4N13APyFixedArray13APyFixedArrayERKNSt6vectorINSt6size_tEEENSt8optionalIiEENSt8optionalIiEENSt8optionalIiEE", "APyFixedArray::APyFixedArray::bits"], [9, 4, 1, "_CPPv4N13APyFixedArray13APyFixedArrayERKN8nanobind8sequenceENSt8optionalIiEENSt8optionalIiEENSt8optionalIiEE", "APyFixedArray::APyFixedArray::frac_bits"], [9, 4, 1, "_CPPv4N13APyFixedArray13APyFixedArrayERKNSt6vectorINSt6size_tEEENSt8optionalIiEENSt8optionalIiEENSt8optionalIiEE", "APyFixedArray::APyFixedArray::frac_bits"], [9, 4, 1, "_CPPv4N13APyFixedArray13APyFixedArrayERKN8nanobind8sequenceENSt8optionalIiEENSt8optionalIiEENSt8optionalIiEE", "APyFixedArray::APyFixedArray::int_bits"], [9, 4, 1, "_CPPv4N13APyFixedArray13APyFixedArrayERKNSt6vectorINSt6size_tEEENSt8optionalIiEENSt8optionalIiEENSt8optionalIiEE", "APyFixedArray::APyFixedArray::int_bits"], [9, 4, 1, "_CPPv4N13APyFixedArray13APyFixedArrayERKNSt6vectorINSt6size_tEEENSt8optionalIiEENSt8optionalIiEENSt8optionalIiEE", "APyFixedArray::APyFixedArray::shape"], [9, 2, 1, "_CPPv4NK13APyFixedArray3absEv", "APyFixedArray::abs"], [9, 2, 1, "_CPPv4NK13APyFixedArray4bitsEv", "APyFixedArray::bits"], [9, 2, 1, "_CPPv4NK13APyFixedArray4castENSt8optionalIiEENSt8optionalIiEE16QuantizationMode12OverflowModeNSt8optionalIiEE", "APyFixedArray::cast"], [9, 4, 1, "_CPPv4NK13APyFixedArray4castENSt8optionalIiEENSt8optionalIiEE16QuantizationMode12OverflowModeNSt8optionalIiEE", "APyFixedArray::cast::bits"], [9, 4, 1, "_CPPv4NK13APyFixedArray4castENSt8optionalIiEENSt8optionalIiEE16QuantizationMode12OverflowModeNSt8optionalIiEE", "APyFixedArray::cast::frac_bits"], [9, 4, 1, "_CPPv4NK13APyFixedArray4castENSt8optionalIiEENSt8optionalIiEE16QuantizationMode12OverflowModeNSt8optionalIiEE", "APyFixedArray::cast::int_bits"], [9, 4, 1, "_CPPv4NK13APyFixedArray4castENSt8optionalIiEENSt8optionalIiEE16QuantizationMode12OverflowModeNSt8optionalIiEE", "APyFixedArray::cast::overflow"], [9, 4, 1, "_CPPv4NK13APyFixedArray4castENSt8optionalIiEENSt8optionalIiEE16QuantizationMode12OverflowModeNSt8optionalIiEE", "APyFixedArray::cast::quantization"], [9, 2, 1, "_CPPv4NK13APyFixedArray9frac_bitsEv", "APyFixedArray::frac_bits"], [9, 2, 1, "_CPPv4N13APyFixedArray11from_doubleERKN8nanobind8sequenceENSt8optionalIiEENSt8optionalIiEENSt8optionalIiEE", "APyFixedArray::from_double"], [9, 4, 1, "_CPPv4N13APyFixedArray11from_doubleERKN8nanobind8sequenceENSt8optionalIiEENSt8optionalIiEENSt8optionalIiEE", "APyFixedArray::from_double::bits"], [9, 4, 1, "_CPPv4N13APyFixedArray11from_doubleERKN8nanobind8sequenceENSt8optionalIiEENSt8optionalIiEENSt8optionalIiEE", "APyFixedArray::from_double::double_seq"], [9, 4, 1, "_CPPv4N13APyFixedArray11from_doubleERKN8nanobind8sequenceENSt8optionalIiEENSt8optionalIiEENSt8optionalIiEE", "APyFixedArray::from_double::frac_bits"], [9, 4, 1, "_CPPv4N13APyFixedArray11from_doubleERKN8nanobind8sequenceENSt8optionalIiEENSt8optionalIiEENSt8optionalIiEE", "APyFixedArray::from_double::int_bits"], [9, 2, 1, "_CPPv4NK13APyFixedArray8get_itemENSt6size_tE", "APyFixedArray::get_item"], [9, 4, 1, "_CPPv4NK13APyFixedArray8get_itemENSt6size_tE", "APyFixedArray::get_item::idx"], [9, 2, 1, "_CPPv4NK13APyFixedArray8int_bitsEv", "APyFixedArray::int_bits"], [9, 2, 1, "_CPPv4NK13APyFixedArray12is_identicalERK13APyFixedArray", "APyFixedArray::is_identical"], [9, 4, 1, "_CPPv4NK13APyFixedArray12is_identicalERK13APyFixedArray", "APyFixedArray::is_identical::other"], [9, 2, 1, "_CPPv4NK13APyFixedArray6matmulERK13APyFixedArray", "APyFixedArray::matmul"], [9, 4, 1, "_CPPv4NK13APyFixedArray6matmulERK13APyFixedArray", "APyFixedArray::matmul::rhs"], [9, 2, 1, "_CPPv4NK13APyFixedArray4ndimEv", "APyFixedArray::ndim"], [9, 2, 1, "_CPPv4NK13APyFixedArraymlERK13APyFixedArray", "APyFixedArray::operator*"], [9, 2, 1, "_CPPv4NK13APyFixedArraymlERK8APyFixed", "APyFixedArray::operator*"], [9, 4, 1, "_CPPv4NK13APyFixedArraymlERK13APyFixedArray", "APyFixedArray::operator*::rhs"], [9, 4, 1, "_CPPv4NK13APyFixedArraymlERK8APyFixed", "APyFixedArray::operator*::rhs"], [9, 2, 1, "_CPPv4NK13APyFixedArrayplERK13APyFixedArray", "APyFixedArray::operator+"], [9, 2, 1, "_CPPv4NK13APyFixedArrayplERK8APyFixed", "APyFixedArray::operator+"], [9, 4, 1, "_CPPv4NK13APyFixedArrayplERK13APyFixedArray", "APyFixedArray::operator+::rhs"], [9, 4, 1, "_CPPv4NK13APyFixedArrayplERK8APyFixed", "APyFixedArray::operator+::rhs"], [9, 2, 1, "_CPPv4NK13APyFixedArraymiERK13APyFixedArray", "APyFixedArray::operator-"], [9, 2, 1, "_CPPv4NK13APyFixedArraymiERK8APyFixed", "APyFixedArray::operator-"], [9, 2, 1, "_CPPv4NK13APyFixedArraymiEv", "APyFixedArray::operator-"], [9, 4, 1, "_CPPv4NK13APyFixedArraymiERK13APyFixedArray", "APyFixedArray::operator-::rhs"], [9, 4, 1, "_CPPv4NK13APyFixedArraymiERK8APyFixed", "APyFixedArray::operator-::rhs"], [9, 2, 1, "_CPPv4NK13APyFixedArraydvERK13APyFixedArray", "APyFixedArray::operator/"], [9, 4, 1, "_CPPv4NK13APyFixedArraydvERK13APyFixedArray", "APyFixedArray::operator/::rhs"], [9, 2, 1, "_CPPv4NK13APyFixedArraylsEKi", "APyFixedArray::operator&lt;&lt;"], [9, 4, 1, "_CPPv4NK13APyFixedArraylsEKi", "APyFixedArray::operator&lt;&lt;::shift_val"], [9, 2, 1, "_CPPv4N13APyFixedArraylSEKi", "APyFixedArray::operator&lt;&lt;="], [9, 4, 1, "_CPPv4N13APyFixedArraylSEKi", "APyFixedArray::operator&lt;&lt;=::shift_val"], [9, 2, 1, "_CPPv4NK13APyFixedArrayrsEKi", "APyFixedArray::operator&gt;&gt;"], [9, 4, 1, "_CPPv4NK13APyFixedArrayrsEKi", "APyFixedArray::operator&gt;&gt;::shift_val"], [9, 2, 1, "_CPPv4N13APyFixedArrayrSEKi", "APyFixedArray::operator&gt;&gt;="], [9, 4, 1, "_CPPv4N13APyFixedArrayrSEKi", "APyFixedArray::operator&gt;&gt;=::shift_val"], [9, 2, 1, "_CPPv4NK13APyFixedArray4reprEv", "APyFixedArray::repr"], [9, 2, 1, "_CPPv4NK13APyFixedArray6resizeENSt8optionalIiEENSt8optionalIiEE16QuantizationMode12OverflowModeNSt8optionalIiEE", "APyFixedArray::resize"], [9, 4, 1, "_CPPv4NK13APyFixedArray6resizeENSt8optionalIiEENSt8optionalIiEE16QuantizationMode12OverflowModeNSt8optionalIiEE", "APyFixedArray::resize::bits"], [9, 4, 1, "_CPPv4NK13APyFixedArray6resizeENSt8optionalIiEENSt8optionalIiEE16QuantizationMode12OverflowModeNSt8optionalIiEE", "APyFixedArray::resize::frac_bits"], [9, 4, 1, "_CPPv4NK13APyFixedArray6resizeENSt8optionalIiEENSt8optionalIiEE16QuantizationMode12OverflowModeNSt8optionalIiEE", "APyFixedArray::resize::int_bits"], [9, 4, 1, "_CPPv4NK13APyFixedArray6resizeENSt8optionalIiEENSt8optionalIiEE16QuantizationMode12OverflowModeNSt8optionalIiEE", "APyFixedArray::resize::overflow"], [9, 4, 1, "_CPPv4NK13APyFixedArray6resizeENSt8optionalIiEENSt8optionalIiEE16QuantizationMode12OverflowModeNSt8optionalIiEE", "APyFixedArray::resize::quantization"], [9, 2, 1, "_CPPv4NK13APyFixedArray4rsubERK8APyFixed", "APyFixedArray::rsub"], [9, 4, 1, "_CPPv4NK13APyFixedArray4rsubERK8APyFixed", "APyFixedArray::rsub::rhs"], [9, 2, 1, "_CPPv4NK13APyFixedArray5shapeEv", "APyFixedArray::shape"], [9, 2, 1, "_CPPv4NK13APyFixedArray4sizeEv", "APyFixedArray::size"], [9, 2, 1, "_CPPv4NK13APyFixedArray8to_numpyEv", "APyFixedArray::to_numpy"], [9, 2, 1, "_CPPv4NK13APyFixedArray9transposeEv", "APyFixedArray::transpose"], [10, 1, 1, "_CPPv48APyFloat", "APyFloat"], [10, 2, 1, "_CPPv4N8APyFloat8APyFloatERK12APyFloatDataNSt7uint8_tENSt7uint8_tENSt8optionalI5exp_tEE", "APyFloat::APyFloat"], [10, 2, 1, "_CPPv4N8APyFloat8APyFloatEb5exp_t5man_tNSt7uint8_tENSt7uint8_tENSt8optionalI5exp_tEE", "APyFloat::APyFloat"], [10, 2, 1, "_CPPv4N8APyFloat8APyFloatEi5exp_t5man_tNSt7uint8_tENSt7uint8_tENSt8optionalI5exp_tEE", "APyFloat::APyFloat"], [10, 4, 1, "_CPPv4N8APyFloat8APyFloatERK12APyFloatDataNSt7uint8_tENSt7uint8_tENSt8optionalI5exp_tEE", "APyFloat::APyFloat::bias"], [10, 4, 1, "_CPPv4N8APyFloat8APyFloatEb5exp_t5man_tNSt7uint8_tENSt7uint8_tENSt8optionalI5exp_tEE", "APyFloat::APyFloat::bias"], [10, 4, 1, "_CPPv4N8APyFloat8APyFloatEi5exp_t5man_tNSt7uint8_tENSt7uint8_tENSt8optionalI5exp_tEE", "APyFloat::APyFloat::bias"], [10, 4, 1, "_CPPv4N8APyFloat8APyFloatERK12APyFloatDataNSt7uint8_tENSt7uint8_tENSt8optionalI5exp_tEE", "APyFloat::APyFloat::data"], [10, 4, 1, "_CPPv4N8APyFloat8APyFloatEb5exp_t5man_tNSt7uint8_tENSt7uint8_tENSt8optionalI5exp_tEE", "APyFloat::APyFloat::exp"], [10, 4, 1, "_CPPv4N8APyFloat8APyFloatEi5exp_t5man_tNSt7uint8_tENSt7uint8_tENSt8optionalI5exp_tEE", "APyFloat::APyFloat::exp"], [10, 4, 1, "_CPPv4N8APyFloat8APyFloatERK12APyFloatDataNSt7uint8_tENSt7uint8_tENSt8optionalI5exp_tEE", "APyFloat::APyFloat::exp_bits"], [10, 4, 1, "_CPPv4N8APyFloat8APyFloatEb5exp_t5man_tNSt7uint8_tENSt7uint8_tENSt8optionalI5exp_tEE", "APyFloat::APyFloat::exp_bits"], [10, 4, 1, "_CPPv4N8APyFloat8APyFloatEi5exp_t5man_tNSt7uint8_tENSt7uint8_tENSt8optionalI5exp_tEE", "APyFloat::APyFloat::exp_bits"], [10, 4, 1, "_CPPv4N8APyFloat8APyFloatEb5exp_t5man_tNSt7uint8_tENSt7uint8_tENSt8optionalI5exp_tEE", "APyFloat::APyFloat::man"], [10, 4, 1, "_CPPv4N8APyFloat8APyFloatEi5exp_t5man_tNSt7uint8_tENSt7uint8_tENSt8optionalI5exp_tEE", "APyFloat::APyFloat::man"], [10, 4, 1, "_CPPv4N8APyFloat8APyFloatERK12APyFloatDataNSt7uint8_tENSt7uint8_tENSt8optionalI5exp_tEE", "APyFloat::APyFloat::man_bits"], [10, 4, 1, "_CPPv4N8APyFloat8APyFloatEb5exp_t5man_tNSt7uint8_tENSt7uint8_tENSt8optionalI5exp_tEE", "APyFloat::APyFloat::man_bits"], [10, 4, 1, "_CPPv4N8APyFloat8APyFloatEi5exp_t5man_tNSt7uint8_tENSt7uint8_tENSt8optionalI5exp_tEE", "APyFloat::APyFloat::man_bits"], [10, 4, 1, "_CPPv4N8APyFloat8APyFloatEb5exp_t5man_tNSt7uint8_tENSt7uint8_tENSt8optionalI5exp_tEE", "APyFloat::APyFloat::sign"], [10, 4, 1, "_CPPv4N8APyFloat8APyFloatEi5exp_t5man_tNSt7uint8_tENSt7uint8_tENSt8optionalI5exp_tEE", "APyFloat::APyFloat::sign"], [10, 2, 1, "_CPPv4N8APyFloat3absERK8APyFloat", "APyFloat::abs"], [10, 4, 1, "_CPPv4N8APyFloat3absERK8APyFloat", "APyFloat::abs::x"], [10, 2, 1, "_CPPv4NK8APyFloat4castENSt7uint8_tENSt7uint8_tENSt8optionalI5exp_tEENSt8optionalI16QuantizationModeEE", "APyFloat::cast"], [10, 4, 1, "_CPPv4NK8APyFloat4castENSt7uint8_tENSt7uint8_tENSt8optionalI5exp_tEENSt8optionalI16QuantizationModeEE", "APyFloat::cast::bias"], [10, 4, 1, "_CPPv4NK8APyFloat4castENSt7uint8_tENSt7uint8_tENSt8optionalI5exp_tEENSt8optionalI16QuantizationModeEE", "APyFloat::cast::exp_bits"], [10, 4, 1, "_CPPv4NK8APyFloat4castENSt7uint8_tENSt7uint8_tENSt8optionalI5exp_tEENSt8optionalI16QuantizationModeEE", "APyFloat::cast::man_bits"], [10, 4, 1, "_CPPv4NK8APyFloat4castENSt7uint8_tENSt7uint8_tENSt8optionalI5exp_tEENSt8optionalI16QuantizationModeEE", "APyFloat::cast::quantization"], [10, 2, 1, "_CPPv4NK8APyFloat16cast_to_bfloat16ENSt8optionalI16QuantizationModeEE", "APyFloat::cast_to_bfloat16"], [10, 4, 1, "_CPPv4NK8APyFloat16cast_to_bfloat16ENSt8optionalI16QuantizationModeEE", "APyFloat::cast_to_bfloat16::quantization"], [10, 2, 1, "_CPPv4NK8APyFloat14cast_to_doubleENSt8optionalI16QuantizationModeEE", "APyFloat::cast_to_double"], [10, 4, 1, "_CPPv4NK8APyFloat14cast_to_doubleENSt8optionalI16QuantizationModeEE", "APyFloat::cast_to_double::quantization"], [10, 2, 1, "_CPPv4NK8APyFloat12cast_to_halfENSt8optionalI16QuantizationModeEE", "APyFloat::cast_to_half"], [10, 4, 1, "_CPPv4NK8APyFloat12cast_to_halfENSt8optionalI16QuantizationModeEE", "APyFloat::cast_to_half::quantization"], [10, 2, 1, "_CPPv4NK8APyFloat14cast_to_singleENSt8optionalI16QuantizationModeEE", "APyFloat::cast_to_single"], [10, 4, 1, "_CPPv4NK8APyFloat14cast_to_singleENSt8optionalI16QuantizationModeEE", "APyFloat::cast_to_single::quantization"], [10, 2, 1, "_CPPv4N8APyFloat9from_bitsEyNSt7uint8_tENSt7uint8_tENSt8optionalI5exp_tEE", "APyFloat::from_bits"], [10, 4, 1, "_CPPv4N8APyFloat9from_bitsEyNSt7uint8_tENSt7uint8_tENSt8optionalI5exp_tEE", "APyFloat::from_bits::bias"], [10, 4, 1, "_CPPv4N8APyFloat9from_bitsEyNSt7uint8_tENSt7uint8_tENSt8optionalI5exp_tEE", "APyFloat::from_bits::bits"], [10, 4, 1, "_CPPv4N8APyFloat9from_bitsEyNSt7uint8_tENSt7uint8_tENSt8optionalI5exp_tEE", "APyFloat::from_bits::exp_bits"], [10, 4, 1, "_CPPv4N8APyFloat9from_bitsEyNSt7uint8_tENSt7uint8_tENSt8optionalI5exp_tEE", "APyFloat::from_bits::man_bits"], [10, 2, 1, "_CPPv4N8APyFloat11from_doubleEdNSt7uint8_tENSt7uint8_tENSt8optionalI5exp_tEENSt8optionalI16QuantizationModeEE", "APyFloat::from_double"], [10, 4, 1, "_CPPv4N8APyFloat11from_doubleEdNSt7uint8_tENSt7uint8_tENSt8optionalI5exp_tEENSt8optionalI16QuantizationModeEE", "APyFloat::from_double::bias"], [10, 4, 1, "_CPPv4N8APyFloat11from_doubleEdNSt7uint8_tENSt7uint8_tENSt8optionalI5exp_tEENSt8optionalI16QuantizationModeEE", "APyFloat::from_double::exp_bits"], [10, 4, 1, "_CPPv4N8APyFloat11from_doubleEdNSt7uint8_tENSt7uint8_tENSt8optionalI5exp_tEENSt8optionalI16QuantizationModeEE", "APyFloat::from_double::man_bits"], [10, 4, 1, "_CPPv4N8APyFloat11from_doubleEdNSt7uint8_tENSt7uint8_tENSt8optionalI5exp_tEENSt8optionalI16QuantizationModeEE", "APyFloat::from_double::quantization"], [10, 4, 1, "_CPPv4N8APyFloat11from_doubleEdNSt7uint8_tENSt7uint8_tENSt8optionalI5exp_tEENSt8optionalI16QuantizationModeEE", "APyFloat::from_double::value"], [10, 2, 1, "_CPPv4NK8APyFloat8get_biasEv", "APyFloat::get_bias"], [10, 2, 1, "_CPPv4NK8APyFloat8get_dataEv", "APyFloat::get_data"], [10, 2, 1, "_CPPv4NK8APyFloat7get_expEv", "APyFloat::get_exp"], [10, 2, 1, "_CPPv4NK8APyFloat12get_exp_bitsEv", "APyFloat::get_exp_bits"], [10, 2, 1, "_CPPv4NK8APyFloat7get_manEv", "APyFloat::get_man"], [10, 2, 1, "_CPPv4NK8APyFloat12get_man_bitsEv", "APyFloat::get_man_bits"], [10, 2, 1, "_CPPv4NK8APyFloat8get_signEv", "APyFloat::get_sign"], [10, 2, 1, "_CPPv4N8APyFloat9ieee_biasENSt7uint8_tE", "APyFloat::ieee_bias"], [10, 4, 1, "_CPPv4N8APyFloat9ieee_biasENSt7uint8_tE", "APyFloat::ieee_bias::exp_bits"], [10, 2, 1, "_CPPv4NK8APyFloat9is_finiteEv", "APyFloat::is_finite"], [10, 2, 1, "_CPPv4NK8APyFloat12is_identicalERK8APyFloat", "APyFloat::is_identical"], [10, 4, 1, "_CPPv4NK8APyFloat12is_identicalERK8APyFloat", "APyFloat::is_identical::other"], [10, 2, 1, "_CPPv4NK8APyFloat6is_infEv", "APyFloat::is_inf"], [10, 2, 1, "_CPPv4NK8APyFloat6is_nanEv", "APyFloat::is_nan"], [10, 2, 1, "_CPPv4NK8APyFloat9is_normalEv", "APyFloat::is_normal"], [10, 2, 1, "_CPPv4NK8APyFloat12is_subnormalEv", "APyFloat::is_subnormal"], [10, 2, 1, "_CPPv4NK8APyFloat7is_zeroEv", "APyFloat::is_zero"], [10, 2, 1, "_CPPv4NK8APyFloat5latexEv", "APyFloat::latex"], [10, 2, 1, "_CPPv4NK8APyFloatcvdEv", "APyFloat::operator double"], [10, 2, 1, "_CPPv4NK8APyFloatneERK8APyFloat", "APyFloat::operator!="], [10, 4, 1, "_CPPv4NK8APyFloatneERK8APyFloat", "APyFloat::operator!=::rhs"], [10, 2, 1, "_CPPv4N8APyFloatanER8APyFloat", "APyFloat::operator&amp;"], [10, 4, 1, "_CPPv4N8APyFloatanER8APyFloat", "APyFloat::operator&amp;::rhs"], [10, 2, 1, "_CPPv4NK8APyFloatmlERK8APyFloat", "APyFloat::operator*"], [10, 4, 1, "_CPPv4NK8APyFloatmlERK8APyFloat", "APyFloat::operator*::rhs"], [10, 2, 1, "_CPPv4NK8APyFloatplE8APyFloat", "APyFloat::operator+"], [10, 4, 1, "_CPPv4NK8APyFloatplE8APyFloat", "APyFloat::operator+::rhs"], [10, 2, 1, "_CPPv4NK8APyFloatmiERK8APyFloat", "APyFloat::operator-"], [10, 2, 1, "_CPPv4NK8APyFloatmiEv", "APyFloat::operator-"], [10, 4, 1, "_CPPv4NK8APyFloatmiERK8APyFloat", "APyFloat::operator-::rhs"], [10, 2, 1, "_CPPv4NK8APyFloatdvERK8APyFloat", "APyFloat::operator/"], [10, 4, 1, "_CPPv4NK8APyFloatdvERK8APyFloat", "APyFloat::operator/::rhs"], [10, 2, 1, "_CPPv4NK8APyFloatltERK8APyFloat", "APyFloat::operator&lt;"], [10, 4, 1, "_CPPv4NK8APyFloatltERK8APyFloat", "APyFloat::operator&lt;::rhs"], [10, 2, 1, "_CPPv4NK8APyFloatleERK8APyFloat", "APyFloat::operator&lt;="], [10, 4, 1, "_CPPv4NK8APyFloatleERK8APyFloat", "APyFloat::operator&lt;=::rhs"], [10, 2, 1, "_CPPv4NK8APyFloateqERK8APyFloat", "APyFloat::operator=="], [10, 4, 1, "_CPPv4NK8APyFloateqERK8APyFloat", "APyFloat::operator==::rhs"], [10, 2, 1, "_CPPv4NK8APyFloatgtERK8APyFloat", "APyFloat::operator&gt;"], [10, 4, 1, "_CPPv4NK8APyFloatgtERK8APyFloat", "APyFloat::operator&gt;::rhs"], [10, 2, 1, "_CPPv4NK8APyFloatgeERK8APyFloat", "APyFloat::operator&gt;="], [10, 4, 1, "_CPPv4NK8APyFloatgeERK8APyFloat", "APyFloat::operator&gt;=::rhs"], [10, 2, 1, "_CPPv4N8APyFloateoER8APyFloat", "APyFloat::operator^"], [10, 4, 1, "_CPPv4N8APyFloateoER8APyFloat", "APyFloat::operator^::rhs"], [10, 2, 1, "_CPPv4N8APyFloatorER8APyFloat", "APyFloat::operator|"], [10, 4, 1, "_CPPv4N8APyFloatorER8APyFloat", "APyFloat::operator|::rhs"], [10, 2, 1, "_CPPv4N8APyFloatcoEv", "APyFloat::operator~"], [10, 2, 1, "_CPPv4N8APyFloat3powERK8APyFloatRK8APyFloat", "APyFloat::pow"], [10, 4, 1, "_CPPv4N8APyFloat3powERK8APyFloatRK8APyFloat", "APyFloat::pow::x"], [10, 4, 1, "_CPPv4N8APyFloat3powERK8APyFloatRK8APyFloat", "APyFloat::pow::y"], [10, 2, 1, "_CPPv4N8APyFloat4pownERK8APyFloati", "APyFloat::pown"], [10, 4, 1, "_CPPv4N8APyFloat4pownERK8APyFloati", "APyFloat::pown::n"], [10, 4, 1, "_CPPv4N8APyFloat4pownERK8APyFloati", "APyFloat::pown::x"], [10, 2, 1, "_CPPv4NK8APyFloat13pretty_stringEv", "APyFloat::pretty_string"], [10, 2, 1, "_CPPv4NK8APyFloat4reprEv", "APyFloat::repr"], [10, 2, 1, "_CPPv4NK8APyFloat6resizeENSt7uint8_tENSt7uint8_tENSt8optionalI5exp_tEENSt8optionalI16QuantizationModeEE", "APyFloat::resize"], [10, 4, 1, "_CPPv4NK8APyFloat6resizeENSt7uint8_tENSt7uint8_tENSt8optionalI5exp_tEENSt8optionalI16QuantizationModeEE", "APyFloat::resize::bias"], [10, 4, 1, "_CPPv4NK8APyFloat6resizeENSt7uint8_tENSt7uint8_tENSt8optionalI5exp_tEENSt8optionalI16QuantizationModeEE", "APyFloat::resize::exp_bits"], [10, 4, 1, "_CPPv4NK8APyFloat6resizeENSt7uint8_tENSt7uint8_tENSt8optionalI5exp_tEENSt8optionalI16QuantizationModeEE", "APyFloat::resize::man_bits"], [10, 4, 1, "_CPPv4NK8APyFloat6resizeENSt7uint8_tENSt7uint8_tENSt8optionalI5exp_tEENSt8optionalI16QuantizationModeEE", "APyFloat::resize::quantization"], [10, 2, 1, "_CPPv4NK8APyFloat3strEv", "APyFloat::str"], [10, 2, 1, "_CPPv4NK8APyFloat7to_bitsEv", "APyFloat::to_bits"], [10, 2, 1, "_CPPv4NK8APyFloat9to_doubleEv", "APyFloat::to_double"], [11, 1, 1, "_CPPv413APyFloatArray", "APyFloatArray"], [11, 2, 1, "_CPPv4N13APyFloatArray13APyFloatArrayERKN8nanobind8sequenceERKN8nanobind8sequenceERKN8nanobind8sequenceENSt7uint8_tENSt7uint8_tENSt8optionalI5exp_tEE", "APyFloatArray::APyFloatArray"], [11, 4, 1, "_CPPv4N13APyFloatArray13APyFloatArrayERKN8nanobind8sequenceERKN8nanobind8sequenceERKN8nanobind8sequenceENSt7uint8_tENSt7uint8_tENSt8optionalI5exp_tEE", "APyFloatArray::APyFloatArray::bias"], [11, 4, 1, "_CPPv4N13APyFloatArray13APyFloatArrayERKN8nanobind8sequenceERKN8nanobind8sequenceERKN8nanobind8sequenceENSt7uint8_tENSt7uint8_tENSt8optionalI5exp_tEE", "APyFloatArray::APyFloatArray::exp_bits"], [11, 4, 1, "_CPPv4N13APyFloatArray13APyFloatArrayERKN8nanobind8sequenceERKN8nanobind8sequenceERKN8nanobind8sequenceENSt7uint8_tENSt7uint8_tENSt8optionalI5exp_tEE", "APyFloatArray::APyFloatArray::exp_seq"], [11, 4, 1, "_CPPv4N13APyFloatArray13APyFloatArrayERKN8nanobind8sequenceERKN8nanobind8sequenceERKN8nanobind8sequenceENSt7uint8_tENSt7uint8_tENSt8optionalI5exp_tEE", "APyFloatArray::APyFloatArray::man_bits"], [11, 4, 1, "_CPPv4N13APyFloatArray13APyFloatArrayERKN8nanobind8sequenceERKN8nanobind8sequenceERKN8nanobind8sequenceENSt7uint8_tENSt7uint8_tENSt8optionalI5exp_tEE", "APyFloatArray::APyFloatArray::man_seq"], [11, 4, 1, "_CPPv4N13APyFloatArray13APyFloatArrayERKN8nanobind8sequenceERKN8nanobind8sequenceERKN8nanobind8sequenceENSt7uint8_tENSt7uint8_tENSt8optionalI5exp_tEE", "APyFloatArray::APyFloatArray::sign_seq"], [11, 5, 1, "_CPPv4N13APyFloatArray19ArithmeticOperationE", "APyFloatArray::ArithmeticOperation"], [11, 6, 1, "_CPPv4N13APyFloatArray19ArithmeticOperation8ADDITIONE", "APyFloatArray::ArithmeticOperation::ADDITION"], [11, 6, 1, "_CPPv4N13APyFloatArray19ArithmeticOperation8DIVISIONE", "APyFloatArray::ArithmeticOperation::DIVISION"], [11, 6, 1, "_CPPv4N13APyFloatArray19ArithmeticOperation14MULTIPLICATIONE", "APyFloatArray::ArithmeticOperation::MULTIPLICATION"], [11, 6, 1, "_CPPv4N13APyFloatArray19ArithmeticOperation11SUBTRACTIONE", "APyFloatArray::ArithmeticOperation::SUBTRACTION"], [11, 2, 1, "_CPPv4NK13APyFloatArray4castENSt7uint8_tENSt7uint8_tENSt8optionalI5exp_tEENSt8optionalI16QuantizationModeEE", "APyFloatArray::cast"], [11, 4, 1, "_CPPv4NK13APyFloatArray4castENSt7uint8_tENSt7uint8_tENSt8optionalI5exp_tEENSt8optionalI16QuantizationModeEE", "APyFloatArray::cast::bias"], [11, 4, 1, "_CPPv4NK13APyFloatArray4castENSt7uint8_tENSt7uint8_tENSt8optionalI5exp_tEENSt8optionalI16QuantizationModeEE", "APyFloatArray::cast::exp_bits"], [11, 4, 1, "_CPPv4NK13APyFloatArray4castENSt7uint8_tENSt7uint8_tENSt8optionalI5exp_tEENSt8optionalI16QuantizationModeEE", "APyFloatArray::cast::man_bits"], [11, 4, 1, "_CPPv4NK13APyFloatArray4castENSt7uint8_tENSt7uint8_tENSt8optionalI5exp_tEENSt8optionalI16QuantizationModeEE", "APyFloatArray::cast::quantization"], [11, 2, 1, "_CPPv4NK13APyFloatArray16cast_to_bfloat16ENSt8optionalI16QuantizationModeEE", "APyFloatArray::cast_to_bfloat16"], [11, 4, 1, "_CPPv4NK13APyFloatArray16cast_to_bfloat16ENSt8optionalI16QuantizationModeEE", "APyFloatArray::cast_to_bfloat16::quantization"], [11, 2, 1, "_CPPv4NK13APyFloatArray14cast_to_doubleENSt8optionalI16QuantizationModeEE", "APyFloatArray::cast_to_double"], [11, 4, 1, "_CPPv4NK13APyFloatArray14cast_to_doubleENSt8optionalI16QuantizationModeEE", "APyFloatArray::cast_to_double::quantization"], [11, 2, 1, "_CPPv4NK13APyFloatArray12cast_to_halfENSt8optionalI16QuantizationModeEE", "APyFloatArray::cast_to_half"], [11, 4, 1, "_CPPv4NK13APyFloatArray12cast_to_halfENSt8optionalI16QuantizationModeEE", "APyFloatArray::cast_to_half::quantization"], [11, 2, 1, "_CPPv4NK13APyFloatArray14cast_to_singleENSt8optionalI16QuantizationModeEE", "APyFloatArray::cast_to_single"], [11, 4, 1, "_CPPv4NK13APyFloatArray14cast_to_singleENSt8optionalI16QuantizationModeEE", "APyFloatArray::cast_to_single::quantization"], [11, 2, 1, "_CPPv4N13APyFloatArray11from_doubleERKN8nanobind8sequenceENSt7uint8_tENSt7uint8_tENSt8optionalI5exp_tEENSt8optionalI16QuantizationModeEE", "APyFloatArray::from_double"], [11, 4, 1, "_CPPv4N13APyFloatArray11from_doubleERKN8nanobind8sequenceENSt7uint8_tENSt7uint8_tENSt8optionalI5exp_tEENSt8optionalI16QuantizationModeEE", "APyFloatArray::from_double::bias"], [11, 4, 1, "_CPPv4N13APyFloatArray11from_doubleERKN8nanobind8sequenceENSt7uint8_tENSt7uint8_tENSt8optionalI5exp_tEENSt8optionalI16QuantizationModeEE", "APyFloatArray::from_double::double_seq"], [11, 4, 1, "_CPPv4N13APyFloatArray11from_doubleERKN8nanobind8sequenceENSt7uint8_tENSt7uint8_tENSt8optionalI5exp_tEENSt8optionalI16QuantizationModeEE", "APyFloatArray::from_double::exp_bits"], [11, 4, 1, "_CPPv4N13APyFloatArray11from_doubleERKN8nanobind8sequenceENSt7uint8_tENSt7uint8_tENSt8optionalI5exp_tEENSt8optionalI16QuantizationModeEE", "APyFloatArray::from_double::man_bits"], [11, 4, 1, "_CPPv4N13APyFloatArray11from_doubleERKN8nanobind8sequenceENSt7uint8_tENSt7uint8_tENSt8optionalI5exp_tEENSt8optionalI16QuantizationModeEE", "APyFloatArray::from_double::quantization"], [11, 2, 1, "_CPPv4NK13APyFloatArray8get_biasEv", "APyFloatArray::get_bias"], [11, 2, 1, "_CPPv4NK13APyFloatArray12get_exp_bitsEv", "APyFloatArray::get_exp_bits"], [11, 2, 1, "_CPPv4NK13APyFloatArray8get_itemENSt6size_tE", "APyFloatArray::get_item"], [11, 4, 1, "_CPPv4NK13APyFloatArray8get_itemENSt6size_tE", "APyFloatArray::get_item::idx"], [11, 2, 1, "_CPPv4NK13APyFloatArray12get_man_bitsEv", "APyFloatArray::get_man_bits"], [11, 2, 1, "_CPPv4NK13APyFloatArray8get_ndimEv", "APyFloatArray::get_ndim"], [11, 2, 1, "_CPPv4NK13APyFloatArray9get_shapeEv", "APyFloatArray::get_shape"], [11, 2, 1, "_CPPv4NK13APyFloatArray8get_sizeEv", "APyFloatArray::get_size"], [11, 2, 1, "_CPPv4NK13APyFloatArray12is_identicalERK13APyFloatArray", "APyFloatArray::is_identical"], [11, 4, 1, "_CPPv4NK13APyFloatArray12is_identicalERK13APyFloatArray", "APyFloatArray::is_identical::other"], [11, 2, 1, "_CPPv4NK13APyFloatArray6matmulERK13APyFloatArray", "APyFloatArray::matmul"], [11, 4, 1, "_CPPv4NK13APyFloatArray6matmulERK13APyFloatArray", "APyFloatArray::matmul::rhs"], [11, 2, 1, "_CPPv4NK13APyFloatArraymlERK13APyFloatArray", "APyFloatArray::operator*"], [11, 2, 1, "_CPPv4NK13APyFloatArraymlERK8APyFloat", "APyFloatArray::operator*"], [11, 4, 1, "_CPPv4NK13APyFloatArraymlERK13APyFloatArray", "APyFloatArray::operator*::rhs"], [11, 4, 1, "_CPPv4NK13APyFloatArraymlERK8APyFloat", "APyFloatArray::operator*::rhs"], [11, 2, 1, "_CPPv4NK13APyFloatArrayplERK13APyFloatArray", "APyFloatArray::operator+"], [11, 2, 1, "_CPPv4NK13APyFloatArrayplERK8APyFloat", "APyFloatArray::operator+"], [11, 4, 1, "_CPPv4NK13APyFloatArrayplERK13APyFloatArray", "APyFloatArray::operator+::rhs"], [11, 4, 1, "_CPPv4NK13APyFloatArrayplERK8APyFloat", "APyFloatArray::operator+::rhs"], [11, 2, 1, "_CPPv4NK13APyFloatArraymiERK13APyFloatArray", "APyFloatArray::operator-"], [11, 2, 1, "_CPPv4NK13APyFloatArraymiERK8APyFloat", "APyFloatArray::operator-"], [11, 4, 1, "_CPPv4NK13APyFloatArraymiERK13APyFloatArray", "APyFloatArray::operator-::rhs"], [11, 4, 1, "_CPPv4NK13APyFloatArraymiERK8APyFloat", "APyFloatArray::operator-::rhs"], [11, 2, 1, "_CPPv4NK13APyFloatArraydvERK13APyFloatArray", "APyFloatArray::operator/"], [11, 2, 1, "_CPPv4NK13APyFloatArraydvERK8APyFloat", "APyFloatArray::operator/"], [11, 4, 1, "_CPPv4NK13APyFloatArraydvERK13APyFloatArray", "APyFloatArray::operator/::rhs"], [11, 4, 1, "_CPPv4NK13APyFloatArraydvERK8APyFloat", "APyFloatArray::operator/::rhs"], [11, 2, 1, "_CPPv4NK13APyFloatArray4reprEv", "APyFloatArray::repr"], [11, 2, 1, "_CPPv4NK13APyFloatArray6resizeENSt7uint8_tENSt7uint8_tENSt8optionalI5exp_tEENSt8optionalI16QuantizationModeEE", "APyFloatArray::resize"], [11, 4, 1, "_CPPv4NK13APyFloatArray6resizeENSt7uint8_tENSt7uint8_tENSt8optionalI5exp_tEENSt8optionalI16QuantizationModeEE", "APyFloatArray::resize::bias"], [11, 4, 1, "_CPPv4NK13APyFloatArray6resizeENSt7uint8_tENSt7uint8_tENSt8optionalI5exp_tEENSt8optionalI16QuantizationModeEE", "APyFloatArray::resize::exp_bits"], [11, 4, 1, "_CPPv4NK13APyFloatArray6resizeENSt7uint8_tENSt7uint8_tENSt8optionalI5exp_tEENSt8optionalI16QuantizationModeEE", "APyFloatArray::resize::man_bits"], [11, 4, 1, "_CPPv4NK13APyFloatArray6resizeENSt7uint8_tENSt7uint8_tENSt8optionalI5exp_tEENSt8optionalI16QuantizationModeEE", "APyFloatArray::resize::quantization"], [11, 2, 1, "_CPPv4NK13APyFloatArray8to_numpyEv", "APyFloatArray::to_numpy"], [11, 2, 1, "_CPPv4NK13APyFloatArray9transposeEv", "APyFloatArray::transpose"], [12, 1, 1, "_CPPv412APyFloatData", "APyFloatData"], [12, 7, 1, "_CPPv4N12APyFloatData3expE", "APyFloatData::exp"], [12, 7, 1, "_CPPv4N12APyFloatData3manE", "APyFloatData::man"], [12, 2, 1, "_CPPv4NK12APyFloatDataeqERK12APyFloatData", "APyFloatData::operator=="], [12, 4, 1, "_CPPv4NK12APyFloatDataeqERK12APyFloatData", "APyFloatData::operator==::other"], [12, 7, 1, "_CPPv4N12APyFloatData4signE", "APyFloatData::sign"], [12, 1, 1, "_CPPv418AccumulatorContext", "AccumulatorContext"], [12, 2, 1, "_CPPv4N18AccumulatorContext18AccumulatorContextENSt8optionalIiEENSt8optionalIiEENSt8optionalIiEENSt8optionalI16QuantizationModeEENSt8optionalI12OverflowModeEENSt8optionalINSt7uint8_tEEENSt8optionalINSt7uint8_tEEENSt8optionalI5exp_tEE", "AccumulatorContext::AccumulatorContext"], [12, 4, 1, "_CPPv4N18AccumulatorContext18AccumulatorContextENSt8optionalIiEENSt8optionalIiEENSt8optionalIiEENSt8optionalI16QuantizationModeEENSt8optionalI12OverflowModeEENSt8optionalINSt7uint8_tEEENSt8optionalINSt7uint8_tEEENSt8optionalI5exp_tEE", "AccumulatorContext::AccumulatorContext::bits"], [12, 4, 1, "_CPPv4N18AccumulatorContext18AccumulatorContextENSt8optionalIiEENSt8optionalIiEENSt8optionalIiEENSt8optionalI16QuantizationModeEENSt8optionalI12OverflowModeEENSt8optionalINSt7uint8_tEEENSt8optionalINSt7uint8_tEEENSt8optionalI5exp_tEE", "AccumulatorContext::AccumulatorContext::frac_bits"], [12, 4, 1, "_CPPv4N18AccumulatorContext18AccumulatorContextENSt8optionalIiEENSt8optionalIiEENSt8optionalIiEENSt8optionalI16QuantizationModeEENSt8optionalI12OverflowModeEENSt8optionalINSt7uint8_tEEENSt8optionalINSt7uint8_tEEENSt8optionalI5exp_tEE", "AccumulatorContext::AccumulatorContext::int_bits"], [12, 4, 1, "_CPPv4N18AccumulatorContext18AccumulatorContextENSt8optionalIiEENSt8optionalIiEENSt8optionalIiEENSt8optionalI16QuantizationModeEENSt8optionalI12OverflowModeEENSt8optionalINSt7uint8_tEEENSt8optionalINSt7uint8_tEEENSt8optionalI5exp_tEE", "AccumulatorContext::AccumulatorContext::overflow"], [12, 4, 1, "_CPPv4N18AccumulatorContext18AccumulatorContextENSt8optionalIiEENSt8optionalIiEENSt8optionalIiEENSt8optionalI16QuantizationModeEENSt8optionalI12OverflowModeEENSt8optionalINSt7uint8_tEEENSt8optionalINSt7uint8_tEEENSt8optionalI5exp_tEE", "AccumulatorContext::AccumulatorContext::quantization"], [12, 7, 1, "_CPPv4N18AccumulatorContext12current_modeE", "AccumulatorContext::current_mode"], [12, 2, 1, "_CPPv4N18AccumulatorContext13enter_contextEv", "AccumulatorContext::enter_context"], [12, 2, 1, "_CPPv4N18AccumulatorContext12exit_contextEv", "AccumulatorContext::exit_context"], [12, 7, 1, "_CPPv4N18AccumulatorContext13previous_modeE", "AccumulatorContext::previous_mode"], [12, 1, 1, "_CPPv417AccumulatorOption", "AccumulatorOption"], [12, 7, 1, "_CPPv4N17AccumulatorOption4biasE", "AccumulatorOption::bias"], [12, 7, 1, "_CPPv4N17AccumulatorOption4bitsE", "AccumulatorOption::bits"], [12, 7, 1, "_CPPv4N17AccumulatorOption8exp_bitsE", "AccumulatorOption::exp_bits"], [12, 7, 1, "_CPPv4N17AccumulatorOption8int_bitsE", "AccumulatorOption::int_bits"], [12, 7, 1, "_CPPv4N17AccumulatorOption8man_bitsE", "AccumulatorOption::man_bits"], [12, 7, 1, "_CPPv4N17AccumulatorOption8overflowE", "AccumulatorOption::overflow"], [12, 7, 1, "_CPPv4N17AccumulatorOption12quantizationE", "AccumulatorOption::quantization"], [12, 1, 1, "_CPPv414ContextManager", "ContextManager"], [12, 2, 1, "_CPPv4N14ContextManager13enter_contextEv", "ContextManager::enter_context"], [12, 2, 1, "_CPPv4N14ContextManager12exit_contextEv", "ContextManager::exit_context"], [12, 2, 1, "_CPPv4N14ContextManagerD0Ev", "ContextManager::~ContextManager"], [13, 1, 1, "_CPPv416DoubleDabbleList", "DoubleDabbleList"], [13, 7, 1, "_CPPv4N16DoubleDabbleList12_NIBBLE_MASKE", "DoubleDabbleList::_NIBBLE_MASK"], [13, 7, 1, "_CPPv4N16DoubleDabbleList4dataE", "DoubleDabbleList::data"], [13, 2, 1, "_CPPv4N16DoubleDabbleList9do_dabbleEv", "DoubleDabbleList::do_dabble"], [13, 2, 1, "_CPPv4N16DoubleDabbleList9do_doubleE9mp_limb_t", "DoubleDabbleList::do_double"], [13, 4, 1, "_CPPv4N16DoubleDabbleList9do_doubleE9mp_limb_t", "DoubleDabbleList::do_double::new_bit"], [13, 2, 1, "_CPPv4N16DoubleDabbleList17do_reverse_dabbleEv", "DoubleDabbleList::do_reverse_dabble"], [13, 2, 1, "_CPPv4N16DoubleDabbleList17do_reverse_doubleER9mp_limb_t", "DoubleDabbleList::do_reverse_double"], [13, 4, 1, "_CPPv4N16DoubleDabbleList17do_reverse_doubleER9mp_limb_t", "DoubleDabbleList::do_reverse_double::limb_out"], [13, 1, 1, "_CPPv423NotImplementedException", "NotImplementedException"], [13, 2, 1, "_CPPv4N23NotImplementedException23NotImplementedExceptionENSt8optionalINSt6stringEEE", "NotImplementedException::NotImplementedException"], [13, 4, 1, "_CPPv4N23NotImplementedException23NotImplementedExceptionENSt8optionalINSt6stringEEE", "NotImplementedException::NotImplementedException::msg"], [12, 5, 1, "_CPPv412OverflowMode", "OverflowMode"], [12, 6, 1, "_CPPv4N12OverflowMode11NUMERIC_STDE", "OverflowMode::NUMERIC_STD"], [12, 6, 1, "_CPPv4N12OverflowMode3SATE", "OverflowMode::SAT"], [12, 6, 1, "_CPPv4N12OverflowMode4WRAPE", "OverflowMode::WRAP"], [12, 1, 1, "_CPPv419QuantizationContext", "QuantizationContext"], [12, 2, 1, "_CPPv4N19QuantizationContext19QuantizationContextERK16QuantizationModeNSt8optionalINSt8uint64_tEEE", "QuantizationContext::QuantizationContext"], [12, 4, 1, "_CPPv4N19QuantizationContext19QuantizationContextERK16QuantizationModeNSt8optionalINSt8uint64_tEEE", "QuantizationContext::QuantizationContext::new_mode"], [12, 4, 1, "_CPPv4N19QuantizationContext19QuantizationContextERK16QuantizationModeNSt8optionalINSt8uint64_tEEE", "QuantizationContext::QuantizationContext::new_seed"], [12, 2, 1, "_CPPv4N19QuantizationContext13enter_contextEv", "QuantizationContext::enter_context"], [12, 2, 1, "_CPPv4N19QuantizationContext12exit_contextEv", "QuantizationContext::exit_context"], [12, 7, 1, "_CPPv4N19QuantizationContext8new_modeE", "QuantizationContext::new_mode"], [12, 7, 1, "_CPPv4N19QuantizationContext8new_seedE", "QuantizationContext::new_seed"], [12, 7, 1, "_CPPv4N19QuantizationContext9prev_modeE", "QuantizationContext::prev_mode"], [12, 7, 1, "_CPPv4N19QuantizationContext9prev_seedE", "QuantizationContext::prev_seed"], [12, 5, 1, "_CPPv416QuantizationMode", "QuantizationMode"], [12, 6, 1, "_CPPv4N16QuantizationMode3JAME", "QuantizationMode::JAM"], [12, 6, 1, "_CPPv4N16QuantizationMode12JAM_UNBIASEDE", "QuantizationMode::JAM_UNBIASED"], [12, 6, 1, "_CPPv4N16QuantizationMode3RNDE", "QuantizationMode::RND"], [12, 6, 1, "_CPPv4N16QuantizationMode8RND_CONVE", "QuantizationMode::RND_CONV"], [12, 6, 1, "_CPPv4N16QuantizationMode12RND_CONV_ODDE", "QuantizationMode::RND_CONV_ODD"], [12, 6, 1, "_CPPv4N16QuantizationMode7RND_INFE", "QuantizationMode::RND_INF"], [12, 6, 1, "_CPPv4N16QuantizationMode11RND_MIN_INFE", "QuantizationMode::RND_MIN_INF"], [12, 6, 1, "_CPPv4N16QuantizationMode8RND_ZEROE", "QuantizationMode::RND_ZERO"], [12, 6, 1, "_CPPv4N16QuantizationMode11STOCH_EQUALE", "QuantizationMode::STOCH_EQUAL"], [12, 6, 1, "_CPPv4N16QuantizationMode14STOCH_WEIGHTEDE", "QuantizationMode::STOCH_WEIGHTED"], [12, 6, 1, "_CPPv4N16QuantizationMode3TRNE", "QuantizationMode::TRN"], [12, 6, 1, "_CPPv4N16QuantizationMode7TRN_INFE", "QuantizationMode::TRN_INF"], [12, 6, 1, "_CPPv4N16QuantizationMode8TRN_ZEROE", "QuantizationMode::TRN_ZERO"], [13, 7, 1, "_CPPv415_LIMB_SIZE_BITS", "_LIMB_SIZE_BITS"], [13, 7, 1, "_CPPv416_LIMB_SIZE_BYTES", "_LIMB_SIZE_BYTES"], [12, 8, 1, "_CPPv45exp_t", "exp_t"], [12, 2, 1, "_CPPv420get_accumulator_modev", "get_accumulator_mode"], [12, 2, 1, "_CPPv421get_quantization_modev", "get_quantization_mode"], [12, 2, 1, "_CPPv421get_quantization_seedv", "get_quantization_seed"], [12, 8, 1, "_CPPv45man_t", "man_t"], [12, 2, 1, "_CPPv413random_numberv", "random_number"], [12, 2, 1, "_CPPv421set_quantization_mode16QuantizationMode", "set_quantization_mode"], [12, 4, 1, "_CPPv421set_quantization_mode16QuantizationMode", "set_quantization_mode::mode"], [12, 2, 1, "_CPPv421set_quantization_seedNSt8uint64_tE", "set_quantization_seed"], [13, 2, 1, "_CPPv4I0E15string_from_vecNSt6stringERKNSt6vectorI1TEE", "string_from_vec"], [13, 3, 1, "_CPPv4I0E15string_from_vecNSt6stringERKNSt6vectorI1TEE", "string_from_vec::T"], [13, 4, 1, "_CPPv4I0E15string_from_vecNSt6stringERKNSt6vectorI1TEE", "string_from_vec::vec"]], "apytypes": [[0, 9, 1, "", "APyFixed"], [1, 9, 1, "", "APyFixedArray"], [2, 9, 1, "", "APyFloat"], [3, 9, 1, "", "APyFloatArray"], [4, 9, 1, "", "AccumulatorContext"], [6, 9, 1, "", "OverflowMode"], [4, 9, 1, "", "QuantizationContext"], [6, 9, 1, "", "QuantizationMode"], [6, 13, 1, "", "get_quantization_mode"], [6, 13, 1, "", "get_quantization_seed"], [6, 13, 1, "", "set_quantization_mode"], [6, 13, 1, "", "set_quantization_seed"]], "apytypes.APyFixed": [[0, 10, 1, "", "__init__"], [0, 11, 1, "", "bits"], [0, 10, 1, "", "cast"], [0, 11, 1, "", "frac_bits"], [0, 10, 1, "", "from_float"], [0, 10, 1, "", "from_str"], [0, 11, 1, "", "int_bits"], [0, 10, 1, "", "is_identical"], [0, 11, 1, "", "is_zero"], [0, 10, 1, "", "resize"], [0, 10, 1, "", "to_bits"]], "apytypes.APyFixedArray": [[1, 11, 1, "", "T"], [1, 10, 1, "", "__init__"], [1, 11, 1, "", "bits"], [1, 10, 1, "", "cast"], [1, 11, 1, "", "frac_bits"], [1, 10, 1, "", "from_float"], [1, 11, 1, "", "int_bits"], [1, 10, 1, "", "is_identical"], [1, 11, 1, "", "ndim"], [1, 10, 1, "", "resize"], [1, 11, 1, "", "shape"], [1, 10, 1, "", "to_numpy"], [1, 10, 1, "", "transpose"]], "apytypes.APyFloat": [[2, 10, 1, "", "__init__"], [2, 11, 1, "", "bias"], [2, 10, 1, "", "cast"], [2, 10, 1, "", "cast_to_bfloat16"], [2, 10, 1, "", "cast_to_double"], [2, 10, 1, "", "cast_to_half"], [2, 10, 1, "", "cast_to_single"], [2, 11, 1, "", "exp"], [2, 11, 1, "", "exp_bits"], [2, 10, 1, "", "from_bits"], [2, 10, 1, "", "from_float"], [2, 11, 1, "", "is_finite"], [2, 10, 1, "", "is_identical"], [2, 11, 1, "", "is_inf"], [2, 11, 1, "", "is_nan"], [2, 11, 1, "", "is_normal"], [2, 11, 1, "", "is_subnormal"], [2, 11, 1, "", "man"], [2, 11, 1, "", "man_bits"], [2, 10, 1, "", "pretty_string"], [2, 10, 1, "", "resize"], [2, 11, 1, "", "sign"], [2, 10, 1, "", "to_bits"]], "apytypes.APyFloatArray": [[3, 11, 1, "", "T"], [3, 10, 1, "", "__init__"], [3, 11, 1, "", "bias"], [3, 10, 1, "", "cast"], [3, 10, 1, "", "cast_to_bfloat16"], [3, 10, 1, "", "cast_to_double"], [3, 10, 1, "", "cast_to_half"], [3, 10, 1, "", "cast_to_single"], [3, 11, 1, "", "exp_bits"], [3, 10, 1, "", "from_float"], [3, 10, 1, "", "is_identical"], [3, 11, 1, "", "man_bits"], [3, 11, 1, "", "ndim"], [3, 10, 1, "", "resize"], [3, 11, 1, "", "shape"], [3, 10, 1, "", "to_numpy"], [3, 10, 1, "", "transpose"]], "apytypes.AccumulatorContext": [[4, 10, 1, "", "__init__"]], "apytypes.OverflowMode": [[6, 10, 1, "", "NUMERIC_STD"], [6, 10, 1, "", "SAT"], [6, 10, 1, "", "WRAP"], [6, 12, 1, "", "__init__"]], "apytypes.QuantizationContext": [[4, 10, 1, "", "__init__"]], "apytypes.QuantizationMode": [[6, 10, 1, "", "JAM"], [6, 10, 1, "", "JAM_UNBIASED"], [6, 10, 1, "", "RND"], [6, 10, 1, "", "RND_CONV"], [6, 10, 1, "", "RND_CONV_ODD"], [6, 10, 1, "", "RND_INF"], [6, 10, 1, "", "RND_MIN_INF"], [6, 10, 1, "", "RND_ZERO"], [6, 10, 1, "", "STOCH_EQUAL"], [6, 10, 1, "", "STOCH_WEIGHTED"], [6, 10, 1, "", "TIES_AWAY"], [6, 10, 1, "", "TIES_EVEN"], [6, 10, 1, "", "TIES_NEG"], [6, 10, 1, "", "TIES_ODD"], [6, 10, 1, "", "TIES_POS"], [6, 10, 1, "", "TIES_ZERO"], [6, 10, 1, "", "TO_NEG"], [6, 10, 1, "", "TO_POS"], [6, 10, 1, "", "TO_ZERO"], [6, 10, 1, "", "TRN"], [6, 10, 1, "", "TRN_INF"], [6, 10, 1, "", "TRN_ZERO"], [6, 12, 1, "", "__init__"]]}, "objtypes": {"0": "c:macro", "1": "cpp:class", "2": "cpp:function", "3": "cpp:templateParam", "4": "cpp:functionParam", "5": "cpp:enum", "6": "cpp:enumerator", "7": "cpp:member", "8": "cpp:type", "9": "py:class", "10": "py:attribute", "11": "py:property", "12": "py:method", "13": "py:function"}, "objnames": {"0": ["c", "macro", "C macro"], "1": ["cpp", "class", "C++ class"], "2": ["cpp", "function", "C++ function"], "3": ["cpp", "templateParam", "C++ template parameter"], "4": ["cpp", "functionParam", "C++ function parameter"], "5": ["cpp", "enum", "C++ enum"], "6": ["cpp", "enumerator", "C++ enumerator"], "7": ["cpp", "member", "C++ member"], "8": ["cpp", "type", "C++ type"], "9": ["py", "class", "Python class"], "10": ["py", "attribute", "Python attribute"], "11": ["py", "property", "Python property"], "12": ["py", "method", "Python method"], "13": ["py", "function", "Python function"]}, "titleterms": {"apyfix": [0, 8, 17], "apyfixedarrai": [1, 9], "apyfloat": [2, 10, 18], "apyfloatarrai": [3, 11], "context": 4, "handl": [4, 6], "apytyp": [5, 15, 21], "python": 5, "packag": 5, "content": [5, 15, 21], "quantiz": 6, "overflow": 6, "comparison": 7, "matrix": 7, "fix": 7, "point": 7, "librari": 7, "float": 7, "benchmark": 7, "apytypes_common": 12, "h": [12, 13, 14, 16], "apytypes_util": 13, "ieee754": 14, "c": 15, "api": 15, "python_util": 16, "exampl": 19, "comput": [20, 22], "time": [20, 22], "welcom": 21, "document": 21, "indic": 21, "tabl": 21}, "envversion": {"sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 60}, "alltitles": {"APyFixed": [[0, "apyfixed"], [8, "apyfixed"], [17, "apyfixed"]], "APyFixedArray": [[1, "apyfixedarray"], [9, "apyfixedarray"]], "APyFloat": [[2, "apyfloat"], [10, "apyfloat"], [18, "apyfloat"]], "APyFloatArray": [[3, "apyfloatarray"], [11, "apyfloatarray"]], "Context handling": [[4, "context-handling"]], "apytypes Python package": [[5, "apytypes-python-package"]], "Contents:": [[5, null], [15, null], [21, null]], "Quantization and overflow handling": [[6, "quantization-and-overflow-handling"]], "Comparison": [[7, "comparison"]], "Comparison matrix": [[7, "comparison-matrix"]], "Fixed-point libraries": [[7, "id13"]], "Floating-point libraries": [[7, "id14"]], "Benchmark": [[7, "benchmark"]], "apytypes_common.h": [[12, "apytypes-common-h"]], "apytypes_util.h": [[13, "apytypes-util-h"]], "ieee754.h": [[14, "ieee754-h"]], "APyTypes C++ API": [[15, "apytypes-c-api"]], "python_util.h": [[16, "python-util-h"]], "Examples": [[19, "examples"]], "Computation times": [[20, "computation-times"], [22, "computation-times"]], "Welcome to APyTypes\u2019 documentation!": [[21, "welcome-to-apytypes-documentation"]], "Indices and tables": [[21, "indices-and-tables"]]}, "indexentries": {"apyfixed (class in apytypes)": [[0, "apytypes.APyFixed"]], "__init__ (apytypes.apyfixed attribute)": [[0, "apytypes.APyFixed.__init__"]], "bits (apytypes.apyfixed property)": [[0, "apytypes.APyFixed.bits"]], "cast (apytypes.apyfixed attribute)": [[0, "apytypes.APyFixed.cast"]], "frac_bits (apytypes.apyfixed property)": [[0, "apytypes.APyFixed.frac_bits"]], "from_float (apytypes.apyfixed attribute)": [[0, "apytypes.APyFixed.from_float"]], "from_str (apytypes.apyfixed attribute)": [[0, "apytypes.APyFixed.from_str"]], "int_bits (apytypes.apyfixed property)": [[0, "apytypes.APyFixed.int_bits"]], "is_identical (apytypes.apyfixed attribute)": [[0, "apytypes.APyFixed.is_identical"]], "is_zero (apytypes.apyfixed property)": [[0, "apytypes.APyFixed.is_zero"]], "resize (apytypes.apyfixed attribute)": [[0, "apytypes.APyFixed.resize"]], "to_bits (apytypes.apyfixed attribute)": [[0, "apytypes.APyFixed.to_bits"]], "apyfixedarray (class in apytypes)": [[1, "apytypes.APyFixedArray"]], "t (apytypes.apyfixedarray property)": [[1, "apytypes.APyFixedArray.T"]], "__init__ (apytypes.apyfixedarray attribute)": [[1, "apytypes.APyFixedArray.__init__"]], "bits (apytypes.apyfixedarray property)": [[1, "apytypes.APyFixedArray.bits"]], "cast (apytypes.apyfixedarray attribute)": [[1, "apytypes.APyFixedArray.cast"]], "frac_bits (apytypes.apyfixedarray property)": [[1, "apytypes.APyFixedArray.frac_bits"]], "from_float (apytypes.apyfixedarray attribute)": [[1, "apytypes.APyFixedArray.from_float"]], "int_bits (apytypes.apyfixedarray property)": [[1, "apytypes.APyFixedArray.int_bits"]], "is_identical (apytypes.apyfixedarray attribute)": [[1, "apytypes.APyFixedArray.is_identical"]], "ndim (apytypes.apyfixedarray property)": [[1, "apytypes.APyFixedArray.ndim"]], "resize (apytypes.apyfixedarray attribute)": [[1, "apytypes.APyFixedArray.resize"]], "shape (apytypes.apyfixedarray property)": [[1, "apytypes.APyFixedArray.shape"]], "to_numpy (apytypes.apyfixedarray attribute)": [[1, "apytypes.APyFixedArray.to_numpy"]], "transpose (apytypes.apyfixedarray attribute)": [[1, "apytypes.APyFixedArray.transpose"]], "apyfloat (class in apytypes)": [[2, "apytypes.APyFloat"]], "__init__ (apytypes.apyfloat attribute)": [[2, "apytypes.APyFloat.__init__"]], "bias (apytypes.apyfloat property)": [[2, "apytypes.APyFloat.bias"]], "cast (apytypes.apyfloat attribute)": [[2, "apytypes.APyFloat.cast"]], "cast_to_bfloat16 (apytypes.apyfloat attribute)": [[2, "apytypes.APyFloat.cast_to_bfloat16"]], "cast_to_double (apytypes.apyfloat attribute)": [[2, "apytypes.APyFloat.cast_to_double"]], "cast_to_half (apytypes.apyfloat attribute)": [[2, "apytypes.APyFloat.cast_to_half"]], "cast_to_single (apytypes.apyfloat attribute)": [[2, "apytypes.APyFloat.cast_to_single"]], "exp (apytypes.apyfloat property)": [[2, "apytypes.APyFloat.exp"]], "exp_bits (apytypes.apyfloat property)": [[2, "apytypes.APyFloat.exp_bits"]], "from_bits (apytypes.apyfloat attribute)": [[2, "apytypes.APyFloat.from_bits"]], "from_float (apytypes.apyfloat attribute)": [[2, "apytypes.APyFloat.from_float"]], "is_finite (apytypes.apyfloat property)": [[2, "apytypes.APyFloat.is_finite"]], "is_identical (apytypes.apyfloat attribute)": [[2, "apytypes.APyFloat.is_identical"]], "is_inf (apytypes.apyfloat property)": [[2, "apytypes.APyFloat.is_inf"]], "is_nan (apytypes.apyfloat property)": [[2, "apytypes.APyFloat.is_nan"]], "is_normal (apytypes.apyfloat property)": [[2, "apytypes.APyFloat.is_normal"]], "is_subnormal (apytypes.apyfloat property)": [[2, "apytypes.APyFloat.is_subnormal"]], "man (apytypes.apyfloat property)": [[2, "apytypes.APyFloat.man"]], "man_bits (apytypes.apyfloat property)": [[2, "apytypes.APyFloat.man_bits"]], "pretty_string (apytypes.apyfloat attribute)": [[2, "apytypes.APyFloat.pretty_string"]], "resize (apytypes.apyfloat attribute)": [[2, "apytypes.APyFloat.resize"]], "sign (apytypes.apyfloat property)": [[2, "apytypes.APyFloat.sign"]], "to_bits (apytypes.apyfloat attribute)": [[2, "apytypes.APyFloat.to_bits"]], "apyfloatarray (class in apytypes)": [[3, "apytypes.APyFloatArray"]], "t (apytypes.apyfloatarray property)": [[3, "apytypes.APyFloatArray.T"]], "__init__ (apytypes.apyfloatarray attribute)": [[3, "apytypes.APyFloatArray.__init__"]], "bias (apytypes.apyfloatarray property)": [[3, "apytypes.APyFloatArray.bias"]], "cast (apytypes.apyfloatarray attribute)": [[3, "apytypes.APyFloatArray.cast"]], "cast_to_bfloat16 (apytypes.apyfloatarray attribute)": [[3, "apytypes.APyFloatArray.cast_to_bfloat16"]], "cast_to_double (apytypes.apyfloatarray attribute)": [[3, "apytypes.APyFloatArray.cast_to_double"]], "cast_to_half (apytypes.apyfloatarray attribute)": [[3, "apytypes.APyFloatArray.cast_to_half"]], "cast_to_single (apytypes.apyfloatarray attribute)": [[3, "apytypes.APyFloatArray.cast_to_single"]], "exp_bits (apytypes.apyfloatarray property)": [[3, "apytypes.APyFloatArray.exp_bits"]], "from_float (apytypes.apyfloatarray attribute)": [[3, "apytypes.APyFloatArray.from_float"]], "is_identical (apytypes.apyfloatarray attribute)": [[3, "apytypes.APyFloatArray.is_identical"]], "man_bits (apytypes.apyfloatarray property)": [[3, "apytypes.APyFloatArray.man_bits"]], "ndim (apytypes.apyfloatarray property)": [[3, "apytypes.APyFloatArray.ndim"]], "resize (apytypes.apyfloatarray attribute)": [[3, "apytypes.APyFloatArray.resize"]], "shape (apytypes.apyfloatarray property)": [[3, "apytypes.APyFloatArray.shape"]], "to_numpy (apytypes.apyfloatarray attribute)": [[3, "apytypes.APyFloatArray.to_numpy"]], "transpose (apytypes.apyfloatarray attribute)": [[3, "apytypes.APyFloatArray.transpose"]], "accumulatorcontext (class in apytypes)": [[4, "apytypes.AccumulatorContext"]], "quantizationcontext (class in apytypes)": [[4, "apytypes.QuantizationContext"]], "__init__ (apytypes.accumulatorcontext attribute)": [[4, "apytypes.AccumulatorContext.__init__"]], "__init__ (apytypes.quantizationcontext attribute)": [[4, "apytypes.QuantizationContext.__init__"]], "jam (apytypes.quantizationmode attribute)": [[6, "apytypes.QuantizationMode.JAM"]], "jam_unbiased (apytypes.quantizationmode attribute)": [[6, "apytypes.QuantizationMode.JAM_UNBIASED"]], "numeric_std (apytypes.overflowmode attribute)": [[6, "apytypes.OverflowMode.NUMERIC_STD"]], "overflowmode (class in apytypes)": [[6, "apytypes.OverflowMode"]], "quantizationmode (class in apytypes)": [[6, "apytypes.QuantizationMode"]], "rnd (apytypes.quantizationmode attribute)": [[6, "apytypes.QuantizationMode.RND"]], "rnd_conv (apytypes.quantizationmode attribute)": [[6, "apytypes.QuantizationMode.RND_CONV"]], "rnd_conv_odd (apytypes.quantizationmode attribute)": [[6, "apytypes.QuantizationMode.RND_CONV_ODD"]], "rnd_inf (apytypes.quantizationmode attribute)": [[6, "apytypes.QuantizationMode.RND_INF"]], "rnd_min_inf (apytypes.quantizationmode attribute)": [[6, "apytypes.QuantizationMode.RND_MIN_INF"]], "rnd_zero (apytypes.quantizationmode attribute)": [[6, "apytypes.QuantizationMode.RND_ZERO"]], "sat (apytypes.overflowmode attribute)": [[6, "apytypes.OverflowMode.SAT"]], "stoch_equal (apytypes.quantizationmode attribute)": [[6, "apytypes.QuantizationMode.STOCH_EQUAL"]], "stoch_weighted (apytypes.quantizationmode attribute)": [[6, "apytypes.QuantizationMode.STOCH_WEIGHTED"]], "ties_away (apytypes.quantizationmode attribute)": [[6, "apytypes.QuantizationMode.TIES_AWAY"]], "ties_even (apytypes.quantizationmode attribute)": [[6, "apytypes.QuantizationMode.TIES_EVEN"]], "ties_neg (apytypes.quantizationmode attribute)": [[6, "apytypes.QuantizationMode.TIES_NEG"]], "ties_odd (apytypes.quantizationmode attribute)": [[6, "apytypes.QuantizationMode.TIES_ODD"]], "ties_pos (apytypes.quantizationmode attribute)": [[6, "apytypes.QuantizationMode.TIES_POS"]], "ties_zero (apytypes.quantizationmode attribute)": [[6, "apytypes.QuantizationMode.TIES_ZERO"]], "to_neg (apytypes.quantizationmode attribute)": [[6, "apytypes.QuantizationMode.TO_NEG"]], "to_pos (apytypes.quantizationmode attribute)": [[6, "apytypes.QuantizationMode.TO_POS"]], "to_zero (apytypes.quantizationmode attribute)": [[6, "apytypes.QuantizationMode.TO_ZERO"]], "trn (apytypes.quantizationmode attribute)": [[6, "apytypes.QuantizationMode.TRN"]], "trn_inf (apytypes.quantizationmode attribute)": [[6, "apytypes.QuantizationMode.TRN_INF"]], "trn_zero (apytypes.quantizationmode attribute)": [[6, "apytypes.QuantizationMode.TRN_ZERO"]], "wrap (apytypes.overflowmode attribute)": [[6, "apytypes.OverflowMode.WRAP"]], "__init__() (apytypes.overflowmode method)": [[6, "apytypes.OverflowMode.__init__"]], "__init__() (apytypes.quantizationmode method)": [[6, "apytypes.QuantizationMode.__init__"]], "get_quantization_mode() (in module apytypes)": [[6, "apytypes.get_quantization_mode"]], "get_quantization_seed() (in module apytypes)": [[6, "apytypes.get_quantization_seed"]], "set_quantization_mode() (in module apytypes)": [[6, "apytypes.set_quantization_mode"]], "set_quantization_seed() (in module apytypes)": [[6, "apytypes.set_quantization_seed"]], "apyfixed (c++ class)": [[8, "_CPPv48APyFixed"]], "apyfixed::apyfixed (c++ function)": [[8, "_CPPv4I0EN8APyFixed8APyFixedEii3_IT3_IT"], [8, "_CPPv4N8APyFixed8APyFixedEN8nanobind4int_ENSt8optionalIiEENSt8optionalIiEENSt8optionalIiEE"], [8, "_CPPv4N8APyFixed8APyFixedENSt8optionalIiEENSt8optionalIiEENSt8optionalIiEE"], [8, "_CPPv4N8APyFixed8APyFixedERK8APyFixed"], [8, "_CPPv4N8APyFixed8APyFixedEii"], [8, "_CPPv4N8APyFixed8APyFixedEiiRKNSt6vectorI9mp_limb_tEE"], [8, "_CPPv4N8APyFixed8APyFixedEv"]], "apyfixed::abs (c++ function)": [[8, "_CPPv4NK8APyFixed3absEv"]], "apyfixed::bit_pattern_to_string_dec (c++ function)": [[8, "_CPPv4NK8APyFixed25bit_pattern_to_string_decEv"]], "apyfixed::bits (c++ function)": [[8, "_CPPv4NK8APyFixed4bitsEv"]], "apyfixed::cast (c++ function)": [[8, "_CPPv4NK8APyFixed4castENSt8optionalIiEENSt8optionalIiEE16QuantizationMode12OverflowModeNSt8optionalIiEE"]], "apyfixed::cast_correct_wl (c++ function)": [[8, "_CPPv4NK8APyFixed15cast_correct_wlENSt6vectorI9mp_limb_tE8iteratorENSt6vectorI9mp_limb_tE8iteratorEii"]], "apyfixed::frac_bits (c++ function)": [[8, "_CPPv4NK8APyFixed9frac_bitsEv"]], "apyfixed::from_double (c++ function)": [[8, "_CPPv4N8APyFixed11from_doubleEdNSt8optionalIiEENSt8optionalIiEENSt8optionalIiEE"]], "apyfixed::from_string (c++ function)": [[8, "_CPPv4N8APyFixed11from_stringENSt6stringENSt8optionalIiEENSt8optionalIiEEiNSt8optionalIiEE"]], "apyfixed::increment_lsb (c++ function)": [[8, "_CPPv4N8APyFixed13increment_lsbEv"]], "apyfixed::int_bits (c++ function)": [[8, "_CPPv4NK8APyFixed8int_bitsEv"]], "apyfixed::is_identical (c++ function)": [[8, "_CPPv4NK8APyFixed12is_identicalERK8APyFixed"]], "apyfixed::is_negative (c++ function)": [[8, "_CPPv4NK8APyFixed11is_negativeEv"]], "apyfixed::is_positive (c++ function)": [[8, "_CPPv4NK8APyFixed11is_positiveEv"]], "apyfixed::is_zero (c++ function)": [[8, "_CPPv4NK8APyFixed7is_zeroEv"]], "apyfixed::latex (c++ function)": [[8, "_CPPv4NK8APyFixed5latexEv"]], "apyfixed::operator double (c++ function)": [[8, "_CPPv4NK8APyFixedcvdEv"]], "apyfixed::operator!= (c++ function)": [[8, "_CPPv4NK8APyFixedneERK8APyFixed"]], "apyfixed::operator* (c++ function)": [[8, "_CPPv4NK8APyFixedmlERK8APyFixed"], [8, "_CPPv4NK8APyFixedmlEi"]], "apyfixed::operator+ (c++ function)": [[8, "_CPPv4NK8APyFixedplERK8APyFixed"], [8, "_CPPv4NK8APyFixedplEi"]], "apyfixed::operator- (c++ function)": [[8, "_CPPv4NK8APyFixedmiERK8APyFixed"], [8, "_CPPv4NK8APyFixedmiEi"], [8, "_CPPv4NK8APyFixedmiEv"]], "apyfixed::operator/ (c++ function)": [[8, "_CPPv4NK8APyFixeddvERK8APyFixed"], [8, "_CPPv4NK8APyFixeddvEi"]], "apyfixed::operator< (c++ function)": [[8, "_CPPv4NK8APyFixedltERK8APyFixed"]], "apyfixed::operator<< (c++ function)": [[8, "_CPPv4NK8APyFixedlsEKi"]], "apyfixed::operator<<= (c++ function)": [[8, "_CPPv4N8APyFixedlSEKi"]], "apyfixed::operator<= (c++ function)": [[8, "_CPPv4NK8APyFixedleERK8APyFixed"]], "apyfixed::operator== (c++ function)": [[8, "_CPPv4NK8APyFixedeqERK8APyFixed"]], "apyfixed::operator> (c++ function)": [[8, "_CPPv4NK8APyFixedgtERK8APyFixed"]], "apyfixed::operator>= (c++ function)": [[8, "_CPPv4NK8APyFixedgeERK8APyFixed"]], "apyfixed::operator>> (c++ function)": [[8, "_CPPv4NK8APyFixedrsEKi"]], "apyfixed::operator>>= (c++ function)": [[8, "_CPPv4N8APyFixedrSEKi"]], "apyfixed::repr (c++ function)": [[8, "_CPPv4NK8APyFixed4reprEv"]], "apyfixed::resize (c++ function)": [[8, "_CPPv4NK8APyFixed6resizeENSt8optionalIiEENSt8optionalIiEE16QuantizationMode12OverflowModeNSt8optionalIiEE"]], "apyfixed::set_from_apyfixed (c++ function)": [[8, "_CPPv4N8APyFixed17set_from_apyfixedERK8APyFixed"]], "apyfixed::set_from_double (c++ function)": [[8, "_CPPv4N8APyFixed15set_from_doubleEd"]], "apyfixed::set_from_string (c++ function)": [[8, "_CPPv4N8APyFixed15set_from_stringERKNSt6stringEi"]], "apyfixed::set_from_string_dec (c++ function)": [[8, "_CPPv4N8APyFixed19set_from_string_decERKNSt6stringE"]], "apyfixed::set_from_string_hex (c++ function)": [[8, "_CPPv4N8APyFixed19set_from_string_hexERKNSt6stringE"]], "apyfixed::set_from_string_oct (c++ function)": [[8, "_CPPv4N8APyFixed19set_from_string_octERKNSt6stringE"]], "apyfixed::to_bits (c++ function)": [[8, "_CPPv4NK8APyFixed7to_bitsEv"]], "apyfixed::to_double (c++ function)": [[8, "_CPPv4NK8APyFixed9to_doubleEv"]], "apyfixed::to_string (c++ function)": [[8, "_CPPv4NK8APyFixed9to_stringEi"]], "apyfixed::to_string_dec (c++ function)": [[8, "_CPPv4NK8APyFixed13to_string_decEv"]], "apyfixed::to_string_hex (c++ function)": [[8, "_CPPv4NK8APyFixed13to_string_hexEv"]], "apyfixed::to_string_oct (c++ function)": [[8, "_CPPv4NK8APyFixed13to_string_octEv"]], "apyfixed::vector_size (c++ function)": [[8, "_CPPv4NK8APyFixed11vector_sizeEv"]], "apyfixedarray (c++ class)": [[9, "_CPPv413APyFixedArray"]], "apyfixedarray::apyfixedarray (c++ function)": [[9, "_CPPv4N13APyFixedArray13APyFixedArrayERKN8nanobind8sequenceENSt8optionalIiEENSt8optionalIiEENSt8optionalIiEE"], [9, "_CPPv4N13APyFixedArray13APyFixedArrayERKNSt6vectorINSt6size_tEEENSt8optionalIiEENSt8optionalIiEENSt8optionalIiEE"], [9, "_CPPv4N13APyFixedArray13APyFixedArrayEv"]], "apyfixedarray::abs (c++ function)": [[9, "_CPPv4NK13APyFixedArray3absEv"]], "apyfixedarray::bits (c++ function)": [[9, "_CPPv4NK13APyFixedArray4bitsEv"]], "apyfixedarray::cast (c++ function)": [[9, "_CPPv4NK13APyFixedArray4castENSt8optionalIiEENSt8optionalIiEE16QuantizationMode12OverflowModeNSt8optionalIiEE"]], "apyfixedarray::frac_bits (c++ function)": [[9, "_CPPv4NK13APyFixedArray9frac_bitsEv"]], "apyfixedarray::from_double (c++ function)": [[9, "_CPPv4N13APyFixedArray11from_doubleERKN8nanobind8sequenceENSt8optionalIiEENSt8optionalIiEENSt8optionalIiEE"]], "apyfixedarray::get_item (c++ function)": [[9, "_CPPv4NK13APyFixedArray8get_itemENSt6size_tE"]], "apyfixedarray::int_bits (c++ function)": [[9, "_CPPv4NK13APyFixedArray8int_bitsEv"]], "apyfixedarray::is_identical (c++ function)": [[9, "_CPPv4NK13APyFixedArray12is_identicalERK13APyFixedArray"]], "apyfixedarray::matmul (c++ function)": [[9, "_CPPv4NK13APyFixedArray6matmulERK13APyFixedArray"]], "apyfixedarray::ndim (c++ function)": [[9, "_CPPv4NK13APyFixedArray4ndimEv"]], "apyfixedarray::operator* (c++ function)": [[9, "_CPPv4NK13APyFixedArraymlERK13APyFixedArray"], [9, "_CPPv4NK13APyFixedArraymlERK8APyFixed"]], "apyfixedarray::operator+ (c++ function)": [[9, "_CPPv4NK13APyFixedArrayplERK13APyFixedArray"], [9, "_CPPv4NK13APyFixedArrayplERK8APyFixed"]], "apyfixedarray::operator- (c++ function)": [[9, "_CPPv4NK13APyFixedArraymiERK13APyFixedArray"], [9, "_CPPv4NK13APyFixedArraymiERK8APyFixed"], [9, "_CPPv4NK13APyFixedArraymiEv"]], "apyfixedarray::operator/ (c++ function)": [[9, "_CPPv4NK13APyFixedArraydvERK13APyFixedArray"]], "apyfixedarray::operator<< (c++ function)": [[9, "_CPPv4NK13APyFixedArraylsEKi"]], "apyfixedarray::operator<<= (c++ function)": [[9, "_CPPv4N13APyFixedArraylSEKi"]], "apyfixedarray::operator>> (c++ function)": [[9, "_CPPv4NK13APyFixedArrayrsEKi"]], "apyfixedarray::operator>>= (c++ function)": [[9, "_CPPv4N13APyFixedArrayrSEKi"]], "apyfixedarray::repr (c++ function)": [[9, "_CPPv4NK13APyFixedArray4reprEv"]], "apyfixedarray::resize (c++ function)": [[9, "_CPPv4NK13APyFixedArray6resizeENSt8optionalIiEENSt8optionalIiEE16QuantizationMode12OverflowModeNSt8optionalIiEE"]], "apyfixedarray::rsub (c++ function)": [[9, "_CPPv4NK13APyFixedArray4rsubERK8APyFixed"]], "apyfixedarray::shape (c++ function)": [[9, "_CPPv4NK13APyFixedArray5shapeEv"]], "apyfixedarray::size (c++ function)": [[9, "_CPPv4NK13APyFixedArray4sizeEv"]], "apyfixedarray::to_numpy (c++ function)": [[9, "_CPPv4NK13APyFixedArray8to_numpyEv"]], "apyfixedarray::transpose (c++ function)": [[9, "_CPPv4NK13APyFixedArray9transposeEv"]], "apyfloat (c++ class)": [[10, "_CPPv48APyFloat"]], "apyfloat::apyfloat (c++ function)": [[10, "_CPPv4N8APyFloat8APyFloatERK12APyFloatDataNSt7uint8_tENSt7uint8_tENSt8optionalI5exp_tEE"], [10, "_CPPv4N8APyFloat8APyFloatEb5exp_t5man_tNSt7uint8_tENSt7uint8_tENSt8optionalI5exp_tEE"], [10, "_CPPv4N8APyFloat8APyFloatEi5exp_t5man_tNSt7uint8_tENSt7uint8_tENSt8optionalI5exp_tEE"]], "apyfloat::abs (c++ function)": [[10, "_CPPv4N8APyFloat3absERK8APyFloat"]], "apyfloat::cast (c++ function)": [[10, "_CPPv4NK8APyFloat4castENSt7uint8_tENSt7uint8_tENSt8optionalI5exp_tEENSt8optionalI16QuantizationModeEE"]], "apyfloat::cast_to_bfloat16 (c++ function)": [[10, "_CPPv4NK8APyFloat16cast_to_bfloat16ENSt8optionalI16QuantizationModeEE"]], "apyfloat::cast_to_double (c++ function)": [[10, "_CPPv4NK8APyFloat14cast_to_doubleENSt8optionalI16QuantizationModeEE"]], "apyfloat::cast_to_half (c++ function)": [[10, "_CPPv4NK8APyFloat12cast_to_halfENSt8optionalI16QuantizationModeEE"]], "apyfloat::cast_to_single (c++ function)": [[10, "_CPPv4NK8APyFloat14cast_to_singleENSt8optionalI16QuantizationModeEE"]], "apyfloat::from_bits (c++ function)": [[10, "_CPPv4N8APyFloat9from_bitsEyNSt7uint8_tENSt7uint8_tENSt8optionalI5exp_tEE"]], "apyfloat::from_double (c++ function)": [[10, "_CPPv4N8APyFloat11from_doubleEdNSt7uint8_tENSt7uint8_tENSt8optionalI5exp_tEENSt8optionalI16QuantizationModeEE"]], "apyfloat::get_bias (c++ function)": [[10, "_CPPv4NK8APyFloat8get_biasEv"]], "apyfloat::get_data (c++ function)": [[10, "_CPPv4NK8APyFloat8get_dataEv"]], "apyfloat::get_exp (c++ function)": [[10, "_CPPv4NK8APyFloat7get_expEv"]], "apyfloat::get_exp_bits (c++ function)": [[10, "_CPPv4NK8APyFloat12get_exp_bitsEv"]], "apyfloat::get_man (c++ function)": [[10, "_CPPv4NK8APyFloat7get_manEv"]], "apyfloat::get_man_bits (c++ function)": [[10, "_CPPv4NK8APyFloat12get_man_bitsEv"]], "apyfloat::get_sign (c++ function)": [[10, "_CPPv4NK8APyFloat8get_signEv"]], "apyfloat::ieee_bias (c++ function)": [[10, "_CPPv4N8APyFloat9ieee_biasENSt7uint8_tE"]], "apyfloat::is_finite (c++ function)": [[10, "_CPPv4NK8APyFloat9is_finiteEv"]], "apyfloat::is_identical (c++ function)": [[10, "_CPPv4NK8APyFloat12is_identicalERK8APyFloat"]], "apyfloat::is_inf (c++ function)": [[10, "_CPPv4NK8APyFloat6is_infEv"]], "apyfloat::is_nan (c++ function)": [[10, "_CPPv4NK8APyFloat6is_nanEv"]], "apyfloat::is_normal (c++ function)": [[10, "_CPPv4NK8APyFloat9is_normalEv"]], "apyfloat::is_subnormal (c++ function)": [[10, "_CPPv4NK8APyFloat12is_subnormalEv"]], "apyfloat::is_zero (c++ function)": [[10, "_CPPv4NK8APyFloat7is_zeroEv"]], "apyfloat::latex (c++ function)": [[10, "_CPPv4NK8APyFloat5latexEv"]], "apyfloat::operator double (c++ function)": [[10, "_CPPv4NK8APyFloatcvdEv"]], "apyfloat::operator!= (c++ function)": [[10, "_CPPv4NK8APyFloatneERK8APyFloat"]], "apyfloat::operator& (c++ function)": [[10, "_CPPv4N8APyFloatanER8APyFloat"]], "apyfloat::operator* (c++ function)": [[10, "_CPPv4NK8APyFloatmlERK8APyFloat"]], "apyfloat::operator+ (c++ function)": [[10, "_CPPv4NK8APyFloatplE8APyFloat"]], "apyfloat::operator- (c++ function)": [[10, "_CPPv4NK8APyFloatmiERK8APyFloat"], [10, "_CPPv4NK8APyFloatmiEv"]], "apyfloat::operator/ (c++ function)": [[10, "_CPPv4NK8APyFloatdvERK8APyFloat"]], "apyfloat::operator< (c++ function)": [[10, "_CPPv4NK8APyFloatltERK8APyFloat"]], "apyfloat::operator<= (c++ function)": [[10, "_CPPv4NK8APyFloatleERK8APyFloat"]], "apyfloat::operator== (c++ function)": [[10, "_CPPv4NK8APyFloateqERK8APyFloat"]], "apyfloat::operator> (c++ function)": [[10, "_CPPv4NK8APyFloatgtERK8APyFloat"]], "apyfloat::operator>= (c++ function)": [[10, "_CPPv4NK8APyFloatgeERK8APyFloat"]], "apyfloat::operator^ (c++ function)": [[10, "_CPPv4N8APyFloateoER8APyFloat"]], "apyfloat::operator| (c++ function)": [[10, "_CPPv4N8APyFloatorER8APyFloat"]], "apyfloat::operator~ (c++ function)": [[10, "_CPPv4N8APyFloatcoEv"]], "apyfloat::pow (c++ function)": [[10, "_CPPv4N8APyFloat3powERK8APyFloatRK8APyFloat"]], "apyfloat::pown (c++ function)": [[10, "_CPPv4N8APyFloat4pownERK8APyFloati"]], "apyfloat::pretty_string (c++ function)": [[10, "_CPPv4NK8APyFloat13pretty_stringEv"]], "apyfloat::repr (c++ function)": [[10, "_CPPv4NK8APyFloat4reprEv"]], "apyfloat::resize (c++ function)": [[10, "_CPPv4NK8APyFloat6resizeENSt7uint8_tENSt7uint8_tENSt8optionalI5exp_tEENSt8optionalI16QuantizationModeEE"]], "apyfloat::str (c++ function)": [[10, "_CPPv4NK8APyFloat3strEv"]], "apyfloat::to_bits (c++ function)": [[10, "_CPPv4NK8APyFloat7to_bitsEv"]], "apyfloat::to_double (c++ function)": [[10, "_CPPv4NK8APyFloat9to_doubleEv"]], "apyfloatarray (c++ class)": [[11, "_CPPv413APyFloatArray"]], "apyfloatarray::apyfloatarray (c++ function)": [[11, "_CPPv4N13APyFloatArray13APyFloatArrayERKN8nanobind8sequenceERKN8nanobind8sequenceERKN8nanobind8sequenceENSt7uint8_tENSt7uint8_tENSt8optionalI5exp_tEE"]], "apyfloatarray::arithmeticoperation (c++ enum)": [[11, "_CPPv4N13APyFloatArray19ArithmeticOperationE"]], "apyfloatarray::arithmeticoperation::addition (c++ enumerator)": [[11, "_CPPv4N13APyFloatArray19ArithmeticOperation8ADDITIONE"]], "apyfloatarray::arithmeticoperation::division (c++ enumerator)": [[11, "_CPPv4N13APyFloatArray19ArithmeticOperation8DIVISIONE"]], "apyfloatarray::arithmeticoperation::multiplication (c++ enumerator)": [[11, "_CPPv4N13APyFloatArray19ArithmeticOperation14MULTIPLICATIONE"]], "apyfloatarray::arithmeticoperation::subtraction (c++ enumerator)": [[11, "_CPPv4N13APyFloatArray19ArithmeticOperation11SUBTRACTIONE"]], "apyfloatarray::cast (c++ function)": [[11, "_CPPv4NK13APyFloatArray4castENSt7uint8_tENSt7uint8_tENSt8optionalI5exp_tEENSt8optionalI16QuantizationModeEE"]], "apyfloatarray::cast_to_bfloat16 (c++ function)": [[11, "_CPPv4NK13APyFloatArray16cast_to_bfloat16ENSt8optionalI16QuantizationModeEE"]], "apyfloatarray::cast_to_double (c++ function)": [[11, "_CPPv4NK13APyFloatArray14cast_to_doubleENSt8optionalI16QuantizationModeEE"]], "apyfloatarray::cast_to_half (c++ function)": [[11, "_CPPv4NK13APyFloatArray12cast_to_halfENSt8optionalI16QuantizationModeEE"]], "apyfloatarray::cast_to_single (c++ function)": [[11, "_CPPv4NK13APyFloatArray14cast_to_singleENSt8optionalI16QuantizationModeEE"]], "apyfloatarray::from_double (c++ function)": [[11, "_CPPv4N13APyFloatArray11from_doubleERKN8nanobind8sequenceENSt7uint8_tENSt7uint8_tENSt8optionalI5exp_tEENSt8optionalI16QuantizationModeEE"]], "apyfloatarray::get_bias (c++ function)": [[11, "_CPPv4NK13APyFloatArray8get_biasEv"]], "apyfloatarray::get_exp_bits (c++ function)": [[11, "_CPPv4NK13APyFloatArray12get_exp_bitsEv"]], "apyfloatarray::get_item (c++ function)": [[11, "_CPPv4NK13APyFloatArray8get_itemENSt6size_tE"]], "apyfloatarray::get_man_bits (c++ function)": [[11, "_CPPv4NK13APyFloatArray12get_man_bitsEv"]], "apyfloatarray::get_ndim (c++ function)": [[11, "_CPPv4NK13APyFloatArray8get_ndimEv"]], "apyfloatarray::get_shape (c++ function)": [[11, "_CPPv4NK13APyFloatArray9get_shapeEv"]], "apyfloatarray::get_size (c++ function)": [[11, "_CPPv4NK13APyFloatArray8get_sizeEv"]], "apyfloatarray::is_identical (c++ function)": [[11, "_CPPv4NK13APyFloatArray12is_identicalERK13APyFloatArray"]], "apyfloatarray::matmul (c++ function)": [[11, "_CPPv4NK13APyFloatArray6matmulERK13APyFloatArray"]], "apyfloatarray::operator* (c++ function)": [[11, "_CPPv4NK13APyFloatArraymlERK13APyFloatArray"], [11, "_CPPv4NK13APyFloatArraymlERK8APyFloat"]], "apyfloatarray::operator+ (c++ function)": [[11, "_CPPv4NK13APyFloatArrayplERK13APyFloatArray"], [11, "_CPPv4NK13APyFloatArrayplERK8APyFloat"]], "apyfloatarray::operator- (c++ function)": [[11, "_CPPv4NK13APyFloatArraymiERK13APyFloatArray"], [11, "_CPPv4NK13APyFloatArraymiERK8APyFloat"]], "apyfloatarray::operator/ (c++ function)": [[11, "_CPPv4NK13APyFloatArraydvERK13APyFloatArray"], [11, "_CPPv4NK13APyFloatArraydvERK8APyFloat"]], "apyfloatarray::repr (c++ function)": [[11, "_CPPv4NK13APyFloatArray4reprEv"]], "apyfloatarray::resize (c++ function)": [[11, "_CPPv4NK13APyFloatArray6resizeENSt7uint8_tENSt7uint8_tENSt8optionalI5exp_tEENSt8optionalI16QuantizationModeEE"]], "apyfloatarray::to_numpy (c++ function)": [[11, "_CPPv4NK13APyFloatArray8to_numpyEv"]], "apyfloatarray::transpose (c++ function)": [[11, "_CPPv4NK13APyFloatArray9transposeEv"]], "apyfloatdata (c++ struct)": [[12, "_CPPv412APyFloatData"]], "apyfloatdata::exp (c++ member)": [[12, "_CPPv4N12APyFloatData3expE"]], "apyfloatdata::man (c++ member)": [[12, "_CPPv4N12APyFloatData3manE"]], "apyfloatdata::operator== (c++ function)": [[12, "_CPPv4NK12APyFloatDataeqERK12APyFloatData"]], "apyfloatdata::sign (c++ member)": [[12, "_CPPv4N12APyFloatData4signE"]], "accumulatorcontext (c++ class)": [[12, "_CPPv418AccumulatorContext"]], "accumulatorcontext::accumulatorcontext (c++ function)": [[12, "_CPPv4N18AccumulatorContext18AccumulatorContextENSt8optionalIiEENSt8optionalIiEENSt8optionalIiEENSt8optionalI16QuantizationModeEENSt8optionalI12OverflowModeEENSt8optionalINSt7uint8_tEEENSt8optionalINSt7uint8_tEEENSt8optionalI5exp_tEE"]], "accumulatorcontext::current_mode (c++ member)": [[12, "_CPPv4N18AccumulatorContext12current_modeE"]], "accumulatorcontext::enter_context (c++ function)": [[12, "_CPPv4N18AccumulatorContext13enter_contextEv"]], "accumulatorcontext::exit_context (c++ function)": [[12, "_CPPv4N18AccumulatorContext12exit_contextEv"]], "accumulatorcontext::previous_mode (c++ member)": [[12, "_CPPv4N18AccumulatorContext13previous_modeE"]], "accumulatoroption (c++ struct)": [[12, "_CPPv417AccumulatorOption"]], "accumulatoroption::bias (c++ member)": [[12, "_CPPv4N17AccumulatorOption4biasE"]], "accumulatoroption::bits (c++ member)": [[12, "_CPPv4N17AccumulatorOption4bitsE"]], "accumulatoroption::exp_bits (c++ member)": [[12, "_CPPv4N17AccumulatorOption8exp_bitsE"]], "accumulatoroption::int_bits (c++ member)": [[12, "_CPPv4N17AccumulatorOption8int_bitsE"]], "accumulatoroption::man_bits (c++ member)": [[12, "_CPPv4N17AccumulatorOption8man_bitsE"]], "accumulatoroption::overflow (c++ member)": [[12, "_CPPv4N17AccumulatorOption8overflowE"]], "accumulatoroption::quantization (c++ member)": [[12, "_CPPv4N17AccumulatorOption12quantizationE"]], "contextmanager (c++ class)": [[12, "_CPPv414ContextManager"]], "contextmanager::enter_context (c++ function)": [[12, "_CPPv4N14ContextManager13enter_contextEv"]], "contextmanager::exit_context (c++ function)": [[12, "_CPPv4N14ContextManager12exit_contextEv"]], "contextmanager::~contextmanager (c++ function)": [[12, "_CPPv4N14ContextManagerD0Ev"]], "overflowmode (c++ enum)": [[12, "_CPPv412OverflowMode"]], "overflowmode::numeric_std (c++ enumerator)": [[12, "_CPPv4N12OverflowMode11NUMERIC_STDE"]], "overflowmode::sat (c++ enumerator)": [[12, "_CPPv4N12OverflowMode3SATE"]], "overflowmode::wrap (c++ enumerator)": [[12, "_CPPv4N12OverflowMode4WRAPE"]], "quantizationcontext (c++ class)": [[12, "_CPPv419QuantizationContext"]], "quantizationcontext::quantizationcontext (c++ function)": [[12, "_CPPv4N19QuantizationContext19QuantizationContextERK16QuantizationModeNSt8optionalINSt8uint64_tEEE"]], "quantizationcontext::enter_context (c++ function)": [[12, "_CPPv4N19QuantizationContext13enter_contextEv"]], "quantizationcontext::exit_context (c++ function)": [[12, "_CPPv4N19QuantizationContext12exit_contextEv"]], "quantizationcontext::new_mode (c++ member)": [[12, "_CPPv4N19QuantizationContext8new_modeE"]], "quantizationcontext::new_seed (c++ member)": [[12, "_CPPv4N19QuantizationContext8new_seedE"]], "quantizationcontext::prev_mode (c++ member)": [[12, "_CPPv4N19QuantizationContext9prev_modeE"]], "quantizationcontext::prev_seed (c++ member)": [[12, "_CPPv4N19QuantizationContext9prev_seedE"]], "quantizationmode (c++ enum)": [[12, "_CPPv416QuantizationMode"]], "quantizationmode::jam (c++ enumerator)": [[12, "_CPPv4N16QuantizationMode3JAME"]], "quantizationmode::jam_unbiased (c++ enumerator)": [[12, "_CPPv4N16QuantizationMode12JAM_UNBIASEDE"]], "quantizationmode::rnd (c++ enumerator)": [[12, "_CPPv4N16QuantizationMode3RNDE"]], "quantizationmode::rnd_conv (c++ enumerator)": [[12, "_CPPv4N16QuantizationMode8RND_CONVE"]], "quantizationmode::rnd_conv_odd (c++ enumerator)": [[12, "_CPPv4N16QuantizationMode12RND_CONV_ODDE"]], "quantizationmode::rnd_inf (c++ enumerator)": [[12, "_CPPv4N16QuantizationMode7RND_INFE"]], "quantizationmode::rnd_min_inf (c++ enumerator)": [[12, "_CPPv4N16QuantizationMode11RND_MIN_INFE"]], "quantizationmode::rnd_zero (c++ enumerator)": [[12, "_CPPv4N16QuantizationMode8RND_ZEROE"]], "quantizationmode::stoch_equal (c++ enumerator)": [[12, "_CPPv4N16QuantizationMode11STOCH_EQUALE"]], "quantizationmode::stoch_weighted (c++ enumerator)": [[12, "_CPPv4N16QuantizationMode14STOCH_WEIGHTEDE"]], "quantizationmode::trn (c++ enumerator)": [[12, "_CPPv4N16QuantizationMode3TRNE"]], "quantizationmode::trn_inf (c++ enumerator)": [[12, "_CPPv4N16QuantizationMode7TRN_INFE"]], "quantizationmode::trn_zero (c++ enumerator)": [[12, "_CPPv4N16QuantizationMode8TRN_ZEROE"]], "exp_t (c++ type)": [[12, "_CPPv45exp_t"]], "get_accumulator_mode (c++ function)": [[12, "_CPPv420get_accumulator_modev"]], "get_quantization_mode (c++ function)": [[12, "_CPPv421get_quantization_modev"]], "get_quantization_seed (c++ function)": [[12, "_CPPv421get_quantization_seedv"]], "man_t (c++ type)": [[12, "_CPPv45man_t"]], "random_number (c++ function)": [[12, "_CPPv413random_numberv"]], "set_quantization_mode (c++ function)": [[12, "_CPPv421set_quantization_mode16QuantizationMode"]], "set_quantization_seed (c++ function)": [[12, "_CPPv421set_quantization_seedNSt8uint64_tE"]], "apy_inline (c macro)": [[13, "c.APY_INLINE"]], "doubledabblelist (c++ struct)": [[13, "_CPPv416DoubleDabbleList"]], "doubledabblelist::_nibble_mask (c++ member)": [[13, "_CPPv4N16DoubleDabbleList12_NIBBLE_MASKE"]], "doubledabblelist::data (c++ member)": [[13, "_CPPv4N16DoubleDabbleList4dataE"]], "doubledabblelist::do_dabble (c++ function)": [[13, "_CPPv4N16DoubleDabbleList9do_dabbleEv"]], "doubledabblelist::do_double (c++ function)": [[13, "_CPPv4N16DoubleDabbleList9do_doubleE9mp_limb_t"]], "doubledabblelist::do_reverse_dabble (c++ function)": [[13, "_CPPv4N16DoubleDabbleList17do_reverse_dabbleEv"]], "doubledabblelist::do_reverse_double (c++ function)": [[13, "_CPPv4N16DoubleDabbleList17do_reverse_doubleER9mp_limb_t"]], "notimplementedexception (c++ class)": [[13, "_CPPv423NotImplementedException"]], "notimplementedexception::notimplementedexception (c++ function)": [[13, "_CPPv4N23NotImplementedException23NotImplementedExceptionENSt8optionalINSt6stringEEE"]], "_limb_size_bits (c++ member)": [[13, "_CPPv415_LIMB_SIZE_BITS"]], "_limb_size_bytes (c++ member)": [[13, "_CPPv416_LIMB_SIZE_BYTES"]], "string_from_vec (c++ function)": [[13, "_CPPv4I0E15string_from_vecNSt6stringERKNSt6vectorI1TEE"]], "get_ob_digit (c macro)": [[16, "c.GET_OB_DIGIT"]], "pylong_digitcount (c macro)": [[16, "c.PyLong_DigitCount"]], "pylong_isnegative (c macro)": [[16, "c.PyLong_IsNegative"]], "pylong_setsignanddigitcount (c macro)": [[16, "c.PyLong_SetSignAndDigitCount"]]}})