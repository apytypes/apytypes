[project]
name = "apytypes"
dynamic = ['version']
authors = [
    { name = "Oscar Gustafsson", email = "oscar.gustafsson@gmail.com" },
    { name = "Mikael Henriksson", email = "mikael.henriksson@liu.se" },
    { name = "Theodor Lindberg", email = "theodor.lindberg@liu.se" },
]
description = "Python package for custom fixed-point and floating-point formats"
readme = "README.md"
requires-python = ">=3.10"
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Science/Research",
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
    "Topic :: Scientific/Engineering :: Electronic Design Automation (EDA)",
]
keywords = ["fixed-point", "floating-point", "finite word length"]

[project.urls]
Repository = "https://github.com/apytypes/apytypes/"
Issues = "https://github.com/apytypes/apytypes/issues"
Homepage = "https://apytypes.github.io/"
Documentation = "https://apytypes.github.io/apytypes/"
Changelog = "https://github.com/apytypes/apytypes/blob/main/CHANGELOG.md"

[project.optional-dependencies]
docs = [
    "breathe>=4.35",
    "furo>=2024",
    "matplotlib>=3.7",
    "numpydoc>=1.7",
    "setuptools>=70",
    "sphinx>=7",
    "sphinx_copybutton>=0.5",
    "sphinx_gallery>=0.16",
    "m2r2",
    "docutils",
    "numpy>=1.25",
    "scipy",
    "cocotb>=1.9.1",
]
test = ["numpy>=1.25", "pytest>=8.2"]
test_hdl = ["numpy>=1.25", "pytest>=8.2", "cocotb>=1.9.1", "vunit-hdl"]
dev = ["nanobind>=2.8.0"]
benchmark = ["numpy>=1.25", "pytest>=8.2", "pytest-benchmark"]
comparison = [
    "fpbinary",
    "fixedpoint",
    "fxpmath>=0.4.9",
    "spfpm",
    "numfi>=0.5",
    "numpy>=1.25",
    "matplotlib>=3.7",
]

[build-system]
build-backend = 'mesonpy'
requires = ['meson-python>=0.16', 'setuptools_scm>=8.1']

[tool.meson-python.args]
install = ['--skip-subprojects']

[tool.setuptools_scm]
version_scheme = "release-branch-semver"
local_scheme = "node-and-date"
parentdir_prefix_version = "apytypes-"
fallback_version = "0.0+UNKNOWN"

[tool.pytest.ini_options]
markers = [
    "float_neg : custom marker for grouping tests for floating-point negation",
    "float_add : custom marker for grouping tests for floating-point addition",
    "float_sub : custom marker for grouping tests for floating-point subtraction",
    "float_mul : custom marker for grouping tests for floating-point multiplication",
    "float_div : custom marker for grouping tests for floating-point division",
    "float_pow : custom marker for grouping tests for floating-point power function",
    "float_comp : custom marker for grouping tests for floating-point comparisons",
    "float_special : custom marker for grouping tests for floating-point special values",
    "float_array : custom marker for grouping tests for floating-point arrays",
    "slow : custom marker for grouping long running tests",
]
testpaths = ["lib/test"]

[tool.cibuildwheel]
skip = [
    "*t-win*", # no free-threading versions on Windows
    "*-win32*", # win32 does not work
]
enable = ["cpython-freethreading", "cpython-prerelease"]
# "graalpy" does also work

[tool.cibuildwheel.macos.environment]
# MacOS 10.14 is the first MacOS release with full support for C++17
MACOSX_DEPLOYMENT_TARGET = "10.14"

[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [".git", ".vscode", "_build", "build"]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.10
target-version = "py310"

[tool.ruff.lint]
select = [
    "ANN",
    "C4",
    "E",
    "F",
    "FURB",
    "I",
    "PERF",
    "PT",
    "PL",
    "PTH",
    "RET",
    "RUF",
    "SIM",
    "SLOT",
    "UP",
]
ignore = [
    "D202",
    "D212", # Start doc-string on first line
    "D412",
    "D413", # End last section with empty line
    "D415",
    "E501", # Too long lines, format handles what is possible
    "F822", # F822 should not be ignored, but as nanobind stubgen does not include __version__...
    "PLR0912", # Too many branches
    "PLR0913", # Too many arguments in function definition
    "PLR0915", # Too many statements
    "PLR2004", # Compare to constants
    "PLR5501", # Use `elif` instead of `else` then `if`: good for readability
    "RET505", # Else after return statement
    "SIM117", # Use single with-statement
]
# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.lint.per-file-ignores]
"lib/test/*" = ["D", "ANN", "PLC0415"]
"examples/*" = ["ANN"]
"docs/*" = ["ANN"]
"comparison/*" = ["ANN"]
"benchmark/*" = ["ANN"]
"lib/apytypes/_apytypes.pyi" = ["C4"]
"lib/test/apyfloat/run_berkeley_cases.py" = ["PTH"]

[tool.ruff.lint.isort]
known-first-party = ["apytypes"]

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
docstring-code-format = true

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"
